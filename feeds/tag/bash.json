{
    "author": {
        "name": "Ryan M"
    },
    "favicon": "https://ryanmo.co/images/favicon.png",
    "feed_url": "https://ryanmo.co/feeds/tag/bash.json",
    "home_page_url": "https://ryanmo.co",
    "items": [
        {
            "id": "https://ryanmo.co/2017/01/05/setting-keyboard-shortcuts-from-terminal-in-macos",
            "url": "https://ryanmo.co/2017/01/05/setting-keyboard-shortcuts-from-terminal-in-macos",
            "title": "Setting Keyboard Shortcuts from Terminal in macOS",
            "content_html": "<p>It's been a few months since my last post. I've spent a lot of time working on my blog, but all things behind the scenes that most people wouldn't even notice. </p>\n<p>Setting keyboard shortcuts on Mac is actually fairly easy, but it requires a lot of clicking around. Fortunately there's a way to do this from the terminal that's faster and easier.</p>\n\n\n<p>The <code>defaults</code> command in MacOS is nothing short of a mystery. It does some powerful things, but the documentation is sparse and half of the time I don't know what I'm doing. That being said, I've had a script written for a long time called <code>new_computer.sh</code> where I set all of my favorite global and application-specific shortcuts when getting a new computer.</p>\n<p>Let's take an example of a shortcut everyone should have: Print As PDF from within a print dialog. I've always set it to \u2318 \u21e7 P. To do this within System Preferences, the steps are:</p>\n<ol>\n<li>Open the Keyboard preference Pane</li>\n<li>Click the Shortcuts tab</li>\n<li>Click App Shortcuts</li>\n<li>Click the + symbol</li>\n<li>Fill out the prompts<ul>\n<li>Leave All Applications Selected</li>\n<li>Menu Title is \"Save as PDF\u2026\" (it's an elipsis, not three periods. Type <code>option ;</code> to get the symbol)</li>\n<li>Choose your shortcut</li>\n</ul>\n</li>\n</ol>\n<p>It's almost too many steps for one shortcut, let alone multiple. Let's try this in Terminal:</p>\n<div class=\"codehilite\"><pre><span></span><code>defaults write -globalDomain NSUserKeyEquivalents  -dict-add <span class=\"s2\">&quot;Save as PDF\\\\U2026&quot;</span> <span class=\"s2\">&quot;@\\$p&quot;</span><span class=\"p\">;</span>\n</code></pre></div>\n\n<p>Easy, right? Sort of. The syntax for writing global shortcuts is fairly straight forward. If you're not creating a shortcut for a specific application, you can use the command above and simply change the title and shortcut. Here are how to represent all of the modifier keys:</p>\n<ul>\n<li>@ is command</li>\n<li>^ is control</li>\n<li>~ is option</li>\n<li>$ is shift</li>\n</ul>\n<p>So command-shift p becomes <code>\"@\\$p\"</code>.</p>\n<p>The reason this came up was that Omnifocus recently added tabs. This is great except that there's no shortcut for cycling through the tabs. This makes the feature almost pointless for me. So to add shortcuts, I ended up using the command above, but I need to target Omnifocus only.</p>\n<div class=\"codehilite\"><pre><span></span><code>defaults write com.omnigroup.OmniFocus2 NSUserKeyEquivalents -dict-add <span class=\"s2\">&quot;Show Next Tab&quot;</span> <span class=\"s2\">&quot;^\\\\U005D&quot;</span>\ndefaults write com.omnigroup.OmniFocus2 NSUserKeyEquivalents -dict-add <span class=\"s2\">&quot;Show Previous Tab&quot;</span> <span class=\"s2\">&quot;^\\\\U005B&quot;</span>\n</code></pre></div>\n\n<p>Here I'm setting show next/previous tab to control [ and control ]. Once you've set your keyboard shortcuts, you'll need to quit and re-launch the application in order for the new preferences to be read.</p>",
            "summary": "<p>It's been a few months since my last post. I've spent a lot of time working on my blog, but all things behind the scenes that most people wouldn't even notice. </p>\n<p>Setting keyboard shortcuts on Mac is actually fairly easy, but it requires a lot of clicking around. Fortunately there's a way to do this from the terminal that's faster and easier.</p>\n",
            "date_published": "2017-01-05T08:54:00-08:00",
            "author": {
                "name": "Ryan M",
                "url": "https://ryanmo.co/author/ryan-m.html"
            },
            "tags": [
                "automation",
                "bash"
            ]
        },
        {
            "id": "https://ryanmo.co/2016/01/11/searching-todos-in-code",
            "url": "https://ryanmo.co/2016/01/11/searching-todos-in-code",
            "title": "Searching Todo\u2019s in Code",
            "content_html": "<p>Happy 2016! It's been a while since I've gotten something up here.</p>\n\n<p>Last week at work I was working on a fairly large refactor of our front-end. Large pieces of code were being moved around and others re-written to be cleaner and more understandable. Throughout this process, I was leaving myself todo's so that I'd remember to fix something later.  Problem is, I would rarely ever go back to them. That was until someone on my team shared some bash functions they had written to make following up on those todo's much easier</p>\n\n\n<p>It's fairly common practice to leave yourself todo's as comments in code such as</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\"># TODO(ryan) fix this later.</span>\n</code></pre></div>\n\n<p>That way if someone comes across it in the future, they'll know that whatever is below may not be perfect and that I plan on fixing it at some point. Finding all your todo's later is a different story. That's where some fancy bash functions come in handy.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">function</span> ga_code_search<span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"c1\"># alias todo=&#39;ga_code_search &quot;TODO\\(`whoami`\\)&quot;&#39;</span>\n    <span class=\"nv\">SCREEN_WIDTH</span><span class=\"o\">=</span><span class=\"sb\">`</span>stty size <span class=\"p\">|</span> awk <span class=\"s1\">&#39;{print $2}&#39;</span><span class=\"sb\">`</span>\n    <span class=\"nv\">SCREEN_WIDTH</span><span class=\"o\">=</span><span class=\"k\">$((</span>SCREEN_WIDTH-4<span class=\"k\">))</span>\n    <span class=\"c1\"># Given a spooky name so you can alias to whatever you want. </span>\n    <span class=\"c1\"># (cs for codesearch)</span>\n    <span class=\"c1\"># AG is WAY faster but requires a binary </span>\n    <span class=\"c1\"># (try brew install the_silver_searcher)</span>\n    <span class=\"nv\">AG_SEARCH</span><span class=\"o\">=</span><span class=\"s1\">&#39;ag &quot;$1&quot; | sort -k1 | cat -n | cut -c 1-$SCREEN_WIDTH&#39;</span>\n\n    <span class=\"c1\"># egrep is installed everywhere and is the default.</span>\n    <span class=\"nv\">GREP_SEARCH</span><span class=\"o\">=</span><span class=\"s1\">&#39;egrep -nR &quot;$1&quot; * | sort -k1 | cat -n | cut -c 1-$SCREEN_WIDTH&#39;</span>\n\n    <span class=\"nv\">SEARCH</span><span class=\"o\">=</span><span class=\"nv\">$AG_SEARCH</span>\n\n    <span class=\"k\">if</span> <span class=\"o\">[</span> <span class=\"nv\">$#</span> -eq <span class=\"m\">0</span> <span class=\"o\">]</span><span class=\"p\">;</span> <span class=\"k\">then</span>\n\n        <span class=\"nb\">echo</span> <span class=\"s2\">&quot;Usage: ga_code_search &lt;search&gt; &lt;index_to_edit&gt;&quot;</span>\n        <span class=\"nb\">echo</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"nb\">echo</span> <span class=\"s2\">&quot;Examples:&quot;</span>\n        <span class=\"nb\">echo</span> <span class=\"s2\">&quot;    ga_code_search TODO&quot;</span>\n        <span class=\"nb\">echo</span> <span class=\"s2\">&quot;    ga_code_search TODO 1&quot;</span>\n        <span class=\"nb\">echo</span> <span class=\"s2\">&quot;    ga_code_search \\&quot;TODO\\\\(graham\\\\)\\&quot;&quot;</span>\n        <span class=\"nb\">echo</span> <span class=\"s2\">&quot;    ga_code_search \\&quot;TODO\\\\(graham\\\\)\\&quot; 4&quot;</span>\n        <span class=\"nb\">echo</span> <span class=\"s2\">&quot;&quot;</span>        \n        <span class=\"k\">return</span>\n    <span class=\"k\">fi</span>\n\n    <span class=\"k\">if</span> <span class=\"o\">[</span> <span class=\"nv\">$#</span> -eq <span class=\"m\">1</span> <span class=\"o\">]</span><span class=\"p\">;</span> <span class=\"k\">then</span>\n        <span class=\"c1\"># There are no command line argumnets.</span>\n        <span class=\"nb\">eval</span> <span class=\"nv\">$SEARCH</span>\n    <span class=\"k\">else</span>\n        <span class=\"c1\"># arg one should be a line from the output of above.</span>\n        <span class=\"nv\">LINE</span><span class=\"o\">=</span><span class=\"s2\">&quot;</span><span class=\"nv\">$SEARCH</span><span class=\"s2\"> | sed &#39;</span><span class=\"nv\">$2</span><span class=\"s2\">q;d&#39; | awk -F&#39;:&#39; &#39;{print +\\$2 \\&quot; \\&quot; \\$1}&#39; | awk -F&#39; &#39; &#39;{print \\$1 \\&quot; \\&quot; \\$3}&#39;&quot;</span>\n        <span class=\"c1\"># Modify with your editor here.</span>\n        emacs <span class=\"se\">\\+</span><span class=\"sb\">`</span><span class=\"nb\">eval</span> <span class=\"nv\">$LINE</span><span class=\"sb\">`</span>\n    <span class=\"k\">fi</span>    \n<span class=\"o\">}</span>\n</code></pre></div>\n\n<p>If you read through the comments, <code>the_silver_searcher</code> is far faster than <code>grep</code> for searching contents of files. If you don't have it already, I'd highly suggest installing it with <code>brew install the_silver_searcher</code>. If you don't want to, be sure to change <code>SEARCH=$AG_SEARCH</code> to <code>SEARCH=$GREP_SEARCH</code>.</p>\n<p>The function itself isn't that interesting. It's when you assign aliases to use this function that things become interesting. Here are the three that were given to me:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\"># Find todo items that are assigned to me. TODO(ryan)</span>\n<span class=\"c1\"># You can change `whoami` to whatever you want.</span>\n<span class=\"nb\">alias</span> <span class=\"nv\">todo</span><span class=\"o\">=</span><span class=\"s1\">&#39;ga_code_search &quot;TODO\\(`whoami`\\)&quot;&#39;</span>\n\n<span class=\"c1\"># Find merge conflicts that need to be resolved.</span>\n<span class=\"nb\">alias</span> <span class=\"nv\">conflicts</span><span class=\"o\">=</span><span class=\"s1\">&#39;ga_code_search &quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;&#39;</span>\n\n<span class=\"c1\"># Find anything below your CWD.</span>\n<span class=\"c1\"># You can now type `cs some_piece_of_code`</span>\n<span class=\"nb\">alias</span> <span class=\"nv\">cs</span><span class=\"o\">=</span><span class=\"s1\">&#39;ga_code_search&#39;</span>\n</code></pre></div>\n\n<p>My favorite by far is the first alias <code>todo</code>. Here is some example output when running this command:</p>\n<div class=\"codehilite\"><pre><span></span><code>&gt; my_project <span class=\"o\">(</span>master<span class=\"o\">)</span>: todo\n <span class=\"m\">1</span>  app/models/strava.py:102: <span class=\"c1\"># TODO(ryan) probably should memoize this at some point so its faster.</span>\n <span class=\"m\">2</span>  app/models/strava.py:148: <span class=\"c1\"># TODO(ryan) make this line prettier</span>\n <span class=\"m\">3</span>  app/templates/strava/index.html:50: &lt;!-- TODO<span class=\"o\">(</span>ryan<span class=\"o\">)</span> move this into its own template file at some point --&gt;\n</code></pre></div>\n\n<p>Notice how there are numbers next to each result? That's because you can also open the file right to that todo item by typing <code>todo 1</code>! As the function is written, it will open in emacs. If that's your editor of choice, you'll be set. I'm personally a fan of Sublime Text. There's a way to also open a file in Sublime Text to a specific line number. Simply change the text in red with that in green:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gd\">- LINE=&quot;$SEARCH | sed &#39;$2q;d&#39; | awk -F&#39;:&#39; &#39;{print +\\$2 \\&quot; \\&quot; \\$1}&#39; | awk -F&#39; &#39; &#39;{print \\$1 \\&quot; \\&quot; \\$3}&#39;&quot;</span>\n<span class=\"gi\">+ LINE=&quot;$SEARCH | sed &#39;$2q;d&#39; | awk -F&#39;:&#39; &#39;{print +\\$2 \\&quot; \\&quot; \\$1}&#39; | awk -F&#39; &#39; &#39;{print \\$3 \\&quot;:\\&quot; \\$1}&#39;&quot;</span>\n\n<span class=\"gd\">- emacs \\+`eval $LINE`</span>\n<span class=\"gi\">+ subl `eval $LINE`</span>\n</code></pre></div>\n\n<p>I've only used the functions for a few days now, but it's greatly improved my workflow for getting old todo's done in code. If you'd like to download these scripts, <a href=\"https://gist.github.com/2819e0576e9280a985ae\">here</a> is the Sublime Text version and the <a href=\"https://gist.github.com/1351952bdc55d206d939\">emacs</a> version.</p>",
            "summary": "\n<p>Last week at work I was working on a fairly large refactor of our front-end. Large pieces of code were being moved around and others re-written to be cleaner and more understandable. Throughout this process, I was leaving myself todo's so that I'd remember to fix something later.  Problem is, I would rarely ever go back to them. That was until someone on my team shared some bash functions they had written to make following up on those todo's much easier</p>\n",
            "date_published": "2016-01-11T08:55:00-08:00",
            "author": {
                "name": "Ryan M",
                "url": "https://ryanmo.co/author/ryan-m.html"
            },
            "tags": [
                "automation",
                "bash",
                "sublimetext"
            ]
        },
        {
            "id": "https://ryanmo.co/2015/05/09/automatically-attach-tmux-in-ssh-session",
            "url": "https://ryanmo.co/2015/05/09/automatically-attach-tmux-in-ssh-session",
            "title": "Automatically Attach tmux in SSH Session",
            "content_html": "<p>I frequently work in ssh sessions and have found terminal multiplexers like <code>tmux</code> to be invaluable. The problem I was constantly facing was having to re-attach or create a new  session each time I would ssh into a machine. Sometimes I would accidentally create a new session when one already existed and would then have to find where I had been working previously.</p>\n\n\n<p>After searching around, I found a nice way to automatically create a  session each time I ssh into a machine, or re-attach if it already exists.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"o\">[[</span> <span class=\"s2\">&quot;</span><span class=\"nv\">$TMUX</span><span class=\"s2\">&quot;</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;&quot;</span> <span class=\"o\">]]</span> <span class=\"o\">&amp;&amp;</span>\n        <span class=\"o\">[[</span> <span class=\"s2\">&quot;</span><span class=\"nv\">$SSH_CONNECTION</span><span class=\"s2\">&quot;</span> !<span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span> <span class=\"o\">]]</span><span class=\"p\">;</span> <span class=\"k\">then</span>\n    <span class=\"c1\"># Attempt to discover a detached session and attach</span>\n    <span class=\"c1\"># it, else create a new session</span>\n    <span class=\"nv\">WHOAMI</span><span class=\"o\">=</span><span class=\"k\">$(</span>whoami<span class=\"k\">)</span>\n    <span class=\"k\">if</span> tmux has-session -t <span class=\"nv\">$WHOAMI</span> <span class=\"m\">2</span>&gt;/dev/null<span class=\"p\">;</span> <span class=\"k\">then</span>\n    tmux -2 attach-session -t <span class=\"nv\">$WHOAMI</span>\n    <span class=\"k\">else</span>\n        tmux -2 new-session -s <span class=\"nv\">$WHOAMI</span>\n    <span class=\"k\">fi</span>\n<span class=\"k\">fi</span>\n</code></pre></div>\n\n<p>I first check to be sure I'm not in a <code>screen</code> session and also that I'm using ssh and not local to my machine. After that, it's a simple check to see if a  session exists. If so, re-attach it, otherwise create a new one. This can be simple added to the bottom of your ~/.bashrc file. Now every time I ssh in to any machine, my previous session is sitting there waiting for me.</p>\n<p><img alt=\"tmux\" src=\"https://ryanmo.co/posts/Tech/2015-05-09/tmux.gif\" /></p>",
            "summary": "<p>I frequently work in ssh sessions and have found terminal multiplexers like <code>tmux</code> to be invaluable. The problem I was constantly facing was having to re-attach or create a new  session each time I would ssh into a machine. Sometimes I would accidentally create a new session when one already existed and would then have to find where I had been working previously.</p>\n",
            "date_published": "2015-05-09T09:47:00-07:00",
            "author": {
                "name": "Ryan M",
                "url": "https://ryanmo.co/author/ryan-m.html"
            },
            "tags": [
                "automation",
                "bash"
            ]
        },
        {
            "id": "https://ryanmo.co/2014/08/31/global-shell-variables-for-dropbox-paths",
            "url": "https://ryanmo.co/2014/08/31/global-shell-variables-for-dropbox-paths",
            "title": "Global Shell Variables for Dropbox Paths",
            "content_html": "<p>I have multiple computers running Dropbox, all of which have different folder paths to where the Dropbox folder is located. I wanted to have a universal way to find and navigate to the folders regardless of what computer I was on.</p>\n\n\n<p>In most cases, setting a variable to your Dropbox path is relatively easy. You could set your .bashrc to look something like this</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nv\">DROPBOX_PERSONAL</span><span class=\"o\">=</span><span class=\"nv\">$HOME</span>/Dropbox\n</code></pre></div>\n\n<p>But this fails in a few situations, all of which apply to me on one or more of my computers</p>\n<ul>\n<li>Multiple Dropbox accounts on one computer (Personal and Business accounts)</li>\n<li>Dropbox isn't located in my home folder</li>\n</ul>\n<p>If you're running Dropbox version 2.8 or higher (you should be anyways), there's a json file that tells you where your Dropbox folders are located. The json looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">{</span>\n    <span class=\"s2\">&quot;personal&quot;</span>: <span class=\"o\">{</span>\n        <span class=\"s2\">&quot;path&quot;</span>: <span class=\"s2\">&quot;/Users/username/Dropbox (Personal)&quot;</span>,\n        <span class=\"s2\">&quot;host&quot;</span>: <span class=\"m\">1234</span>\n    <span class=\"o\">}</span>,\n    <span class=\"s2\">&quot;business&quot;</span>: <span class=\"o\">{</span>\n        <span class=\"s2\">&quot;path&quot;</span>: <span class=\"s2\">&quot;/Users/username/Dropbox (Business)&quot;</span>, \n        <span class=\"s2\">&quot;host&quot;</span>: <span class=\"m\">5678</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n\n<p>What this means is that you can set global variables using this information in your .bashrc or .bash_profile so that you always know where your Dropbox folder is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nv\">DROPBOX_WORK</span><span class=\"o\">=</span><span class=\"k\">$(</span>python -c <span class=\"s2\">&quot;import json;f=open(&#39;</span><span class=\"nv\">$HOME</span><span class=\"s2\">/.dropbox/info.json&#39;, &#39;r&#39;).read();data=json.loads(f);print data.get(&#39;business&#39;, {}).get(&#39;path&#39;, &#39;&#39;)&quot;</span><span class=\"k\">)</span>\n<span class=\"nv\">DROPBOX_PERSONAL</span><span class=\"o\">=</span><span class=\"k\">$(</span>python -c <span class=\"s2\">&quot;import json;f=open(&#39;</span><span class=\"nv\">$HOME</span><span class=\"s2\">/.dropbox/info.json&#39;, &#39;r&#39;).read();data=json.loads(f);print data.get(&#39;personal&#39;, {}).get(&#39;path&#39;, &#39;&#39;)&quot;</span><span class=\"k\">)</span>\n</code></pre></div>\n\n<p>Now all you have to do is reference your Dropbox folders with <code>$DROPBOX_PERSONAL</code> or <code>$DROPBOX_WORK</code>.</p>",
            "summary": "<p>I have multiple computers running Dropbox, all of which have different folder paths to where the Dropbox folder is located. I wanted to have a universal way to find and navigate to the folders regardless of what computer I was on.</p>\n",
            "date_published": "2014-08-31T00:00:00-07:00",
            "author": {
                "name": "Ryan M",
                "url": "https://ryanmo.co/author/ryan-m.html"
            },
            "tags": [
                "bash",
                "automation",
                "Dropbox"
            ]
        },
        {
            "id": "https://ryanmo.co/2014/08/01/find-images-with-no-exif-dates",
            "url": "https://ryanmo.co/2014/08/01/find-images-with-no-exif-dates",
            "title": "Find images with No Exif Dates",
            "content_html": "<p>My Dropbox folder is full of images claiming to be \"missing dates.\" <sup id=\"fnref:1\"><a class=\"footnote-ref\" href=\"#fn:1\">1</a></sup> Some of these photos were thumbnails or images from DayOne that didn't necessarily need dates, but others were real photos that for whatever reason didn't have dates that Dropbox recognized.</p>\n\n\n<p><img alt=\"Carousel Missing Photos\" src=\"https://ryanmo.co/2014/08/01/find-images-with-no-exif-dates/carousel_missing.png\" /></p>\n<p>I did some poking around, and found that there were a couple of different reasons why my photos in Dropbox weren't displaying dates:</p>\n<ul>\n<li>The DateTimeOriginal exif tag was missing entirely</li>\n<li>The DateTimeOriginal was set to 0000:00:00 00:00:00</li>\n</ul>\n<p>With the magic of <a href=\"http://www.sno.phy.queensu.ca/~phil/exiftool/\">exiftool</a>, I found a way to find all the photos in my Dropbox folder that were missing dates and output the results to a CSV.</p>\n<div class=\"codehilite\"><pre><span></span><code>exiftool -filename -r -if <span class=\"s1\">&#39;(not $datetimeoriginal or ($datetimeoriginal eq &quot;0000:00:00 00:00:00&quot;)) and ($filetype eq &quot;JPEG&quot;)&#39;</span> -common -csv &gt; ~/Dropbox/nodates.csv\n</code></pre></div>\n\n<p>This will give you a CSV with all of the common file information for the images. </p>\n<p><img alt=\"CSV of Missing Photos\" src=\"https://ryanmo.co/2014/08/01/find-images-with-no-exif-dates/csv.png\" /></p>\n<p>At this point, you'll need to decide how you'll want to fix these photos. From what I have seen so far, the best exif tag to go on is <code>-filemodifydate</code>, but you'll probably need to figure that out on your own. If you want to fix any photo that matches the above criteria, you can do something like this</p>\n<div class=\"codehilite\"><pre><span></span><code>exiftool <span class=\"sb\">`</span>-datetimeoriginal&lt;filemodifydate<span class=\"sb\">`</span> -r -if <span class=\"s1\">&#39;(not $datetimeoriginal or ($datetimeoriginal eq &quot;0000:00:00 00:00:00&quot;)) and ($filetype eq &quot;JPEG&quot;)&#39;</span> ~/Dropbox\n</code></pre></div>\n\n<div class=\"footnote\">\n<hr />\n<ol>\n<li id=\"fn:1\">\n<p>2965 photos to be exact.&#160;<a class=\"footnote-backref\" href=\"#fnref:1\" title=\"Jump back to footnote 1 in the text\">&#8617;</a></p>\n</li>\n</ol>\n</div>",
            "summary": "<p>My Dropbox folder is full of images claiming to be \"missing dates.\" <sup id=\"fnref:1\"><a class=\"footnote-ref\" href=\"#fn:1\">1</a></sup> Some of these photos were thumbnails or images from DayOne that didn't necessarily need dates, but others were real photos that for whatever reason didn't have dates that Dropbox recognized.</p>\n",
            "date_published": "2014-08-01T00:00:00-07:00",
            "author": {
                "name": "Ryan M",
                "url": "https://ryanmo.co/author/ryan-m.html"
            },
            "tags": [
                "bash",
                "automation",
                "exiftool",
                "photos"
            ]
        },
        {
            "id": "https://ryanmo.co/2014/07/06/log-foursquare-locations-in-markdown",
            "url": "https://ryanmo.co/2014/07/06/log-foursquare-locations-in-markdown",
            "title": "Log Foursquare Locations in Markdown",
            "content_html": "<p>I've always used Foursquare as a way to remember the places I had visited while traveling. Foursquare isn't really meant to be used in this way, and as a result, they don't make it easy to answer the question, \"what was that restaurant I went to last time I was here?\" I'm now using IFTTT to log all my checkins to a text file in my Dropbox account.</p>\n\n\n<p>I like MultiMarkdown tables. So that my Foursquare checkins looked nice, I first created a file in my Dropbox account with a heading</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">|</span> <span class=\"nv\">Date</span> <span class=\"p\">|</span>  <span class=\"nv\">VenueName</span>  <span class=\"p\">|</span> <span class=\"nv\">VenueUrl</span> <span class=\"p\">|</span> <span class=\"nv\">Shout</span> <span class=\"p\">|</span> <span class=\"nv\">MapURL</span> <span class=\"p\">|</span>  <span class=\"nv\">City</span> <span class=\"p\">|</span> <span class=\"nv\">State</span> <span class=\"p\">|</span> <span class=\"nv\">Country</span> <span class=\"p\">|</span>\n<span class=\"p\">|</span> <span class=\"p\">:-</span><span class=\"s s-Atom\">--:</span> <span class=\"p\">|</span> <span class=\"p\">:-</span><span class=\"s s-Atom\">--:</span> <span class=\"p\">|</span> <span class=\"p\">:-</span><span class=\"s s-Atom\">--:</span> <span class=\"p\">|</span> <span class=\"p\">:-</span><span class=\"s s-Atom\">--:</span> <span class=\"p\">|</span> <span class=\"p\">:-</span><span class=\"s s-Atom\">--:</span> <span class=\"p\">|</span> <span class=\"p\">:-</span><span class=\"s s-Atom\">--:</span> <span class=\"p\">|</span>\n</code></pre></div>\n\n<p>In IFTTT, I then created a recipe which matches my table headers</p>\n<p><center><a href=\"https://ifttt.com/view_embed_recipe/187719-share-foursquare-checkins-in-mamarkdown-table\" target = \"_blank\" class=\"embed_recipe embed_recipe-l_45\" id= \"embed_recipe-187719\"><img src= 'https://ifttt.com/recipe_embed_img/187719' alt=\"IFTTT Recipe: Share Foursquare checkins in mamarkdown table connects foursquare to dropbox\" width=\"370px\" style=\"max-width:100%\"/></a><script async type=\"text/javascript\" src= \"//ifttt.com/assets/embed_recipe.js\"></script></center></p>\n<p><img alt=\"IFTTT Content\" src=\"https://ryanmo.co/2014/07/06/log-foursquare-locations-in-markdown/content.png\" /></p>\n<p>You may have noticed that I added an additional \"Address\" column that isn't getting filled out. IFTTT doesn't explicitly give the address of the venue you visited. However, the link to the Google Maps image contains GPS coordinates that I can use. Dr. Drang's <a href=\"http://www.leancrew.com/all-this/2014/07/extracting-coordinates-from-apple-maps/\" title=\"Extracting coordinates from Apple Maps - All this\">post</a> gave me the idea to parse out the coordinates and then use them how I'd like. This script, which I'm using with Hazel each time the file is updated, reverse geolocates the coordinates and returns the full address using OpenStreetMap. After that, it appends that address to each line in the markdown file.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"ch\">#!/bin/bash</span>\n\n<span class=\"nv\">FILE</span><span class=\"o\">=</span><span class=\"s2\">&quot;</span><span class=\"nv\">$HOME</span><span class=\"s2\">/Dropbox/IFTTT/foursquare/foursquare.txt&quot;</span>\n\n<span class=\"nv\">START</span><span class=\"o\">=</span><span class=\"m\">1</span>\n<span class=\"nv\">index</span><span class=\"o\">=</span><span class=\"nv\">$START</span>\n<span class=\"nv\">IFS</span><span class=\"o\">=</span><span class=\"s1\">$&#39;\\n&#39;</span>     <span class=\"c1\"># new field separator, the end of line</span>\n<span class=\"k\">for</span> line <span class=\"k\">in</span> <span class=\"k\">$(</span>cat <span class=\"nv\">$FILE</span><span class=\"k\">)</span>\n<span class=\"k\">do</span>\n    <span class=\"nv\">mapsurl</span><span class=\"o\">=</span><span class=\"k\">$(</span><span class=\"nb\">echo</span> <span class=\"nv\">$line</span> <span class=\"p\">|</span> sed -n <span class=\"s1\">&#39;s/.*(\\(http.*\\)).*/\\1/p&#39;</span><span class=\"k\">)</span><span class=\"p\">;</span>\n\n    <span class=\"nv\">existingaddress</span><span class=\"o\">=</span><span class=\"k\">$(</span><span class=\"nb\">echo</span> <span class=\"nv\">$line</span> <span class=\"p\">|</span> grep -E <span class=\"s1\">&#39;^.*\\(http.*\\)(.*\\|){2,}$&#39;</span><span class=\"k\">)</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"o\">[[</span> ! <span class=\"nv\">$mapsurl</span> <span class=\"o\">||</span> <span class=\"nv\">$existingaddress</span> <span class=\"o\">]]</span><span class=\"p\">;</span> <span class=\"k\">then</span>\n        <span class=\"o\">((</span> <span class=\"nv\">index</span> <span class=\"o\">=</span> index + <span class=\"m\">1</span> <span class=\"o\">))</span>\n        <span class=\"k\">continue</span>\n    <span class=\"k\">fi</span>\n\n    <span class=\"nv\">coords</span><span class=\"o\">=</span><span class=\"k\">$(</span><span class=\"nb\">echo</span> <span class=\"nv\">$mapsurl</span> <span class=\"p\">|</span> sed -E <span class=\"s1\">&#39;s/^.+\\?center=([0-9.,-]+).+/\\1/&#39;</span><span class=\"k\">)</span><span class=\"p\">;</span>\n    <span class=\"nv\">lat</span><span class=\"o\">=</span><span class=\"k\">$(</span><span class=\"nb\">echo</span> <span class=\"nv\">$coords</span> <span class=\"p\">|</span> cut -f1 -d,<span class=\"k\">)</span>\n    <span class=\"nv\">long</span><span class=\"o\">=</span><span class=\"k\">$(</span><span class=\"nb\">echo</span> <span class=\"nv\">$coords</span> <span class=\"p\">|</span> cut -f2 -d,<span class=\"k\">)</span>\n\n    <span class=\"nv\">address</span><span class=\"o\">=</span><span class=\"k\">$(</span>curl -s <span class=\"s2\">&quot;http://nominatim.openstreetmap.org/reverse?format=json&amp;lat=</span><span class=\"si\">${</span><span class=\"nv\">lat</span><span class=\"si\">}</span><span class=\"s2\">&amp;lon=</span><span class=\"si\">${</span><span class=\"nv\">long</span><span class=\"si\">}</span><span class=\"s2\">&amp;zoom=18&amp;addressdetails=1&quot;</span><span class=\"k\">)</span>\n\n    <span class=\"nv\">country</span><span class=\"o\">=</span><span class=\"k\">$(</span><span class=\"nb\">echo</span> <span class=\"nv\">$address</span> <span class=\"p\">|</span> sed -e <span class=\"s1\">&#39;s/.*\\(&quot;country&quot;:&quot;.*&quot;\\),.*/\\1/&#39;</span> <span class=\"p\">|</span> awk -F<span class=\"s1\">&#39;&quot;&#39;</span> <span class=\"s1\">&#39;/country/ {print $4}&#39;</span><span class=\"k\">)</span>\n    <span class=\"nv\">city</span><span class=\"o\">=</span><span class=\"k\">$(</span><span class=\"nb\">echo</span> <span class=\"nv\">$address</span> <span class=\"p\">|</span> sed -e <span class=\"s1\">&#39;s/.*\\(&quot;city&quot;:&quot;.*&quot;\\),.*/\\1/&#39;</span> <span class=\"p\">|</span> awk -F<span class=\"s1\">&#39;&quot;&#39;</span> <span class=\"s1\">&#39;/city/ {print $4}&#39;</span><span class=\"k\">)</span>\n    <span class=\"nv\">state</span><span class=\"o\">=</span><span class=\"k\">$(</span><span class=\"nb\">echo</span> <span class=\"nv\">$address</span> <span class=\"p\">|</span> grep <span class=\"s2\">&quot;\\bstate\\b&quot;</span> <span class=\"p\">|</span> sed -e <span class=\"s1\">&#39;s/.*\\(&quot;state&quot;:&quot;.*&quot;\\),.*/\\1/&#39;</span> <span class=\"p\">|</span> awk -F<span class=\"s1\">&#39;&quot;&#39;</span> <span class=\"s1\">&#39;/state/ {print $4}&#39;</span><span class=\"k\">)</span>\n\n    <span class=\"c1\"># update the line of text</span>\n    sed -i <span class=\"s1\">&#39;&#39;</span> -e <span class=\"s2\">&quot;</span><span class=\"si\">${</span><span class=\"nv\">index</span><span class=\"si\">}</span><span class=\"s2\">s/\\(.*\\)/\\1 </span><span class=\"nv\">$city</span><span class=\"s2\"> | </span><span class=\"nv\">$state</span><span class=\"s2\"> | </span><span class=\"nv\">$country</span><span class=\"s2\"> |/&quot;</span> <span class=\"s2\">&quot;</span><span class=\"nv\">$FILE</span><span class=\"s2\">&quot;</span><span class=\"p\">;</span>\n    <span class=\"o\">((</span> <span class=\"nv\">index</span> <span class=\"o\">=</span> index + <span class=\"m\">1</span> <span class=\"o\">))</span>\n<span class=\"k\">done</span>\n</code></pre></div>\n\n<p>In the end, the table then ends up looking something like this:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Date</th>\n<th align=\"center\">VenueName</th>\n<th align=\"center\">VenueUrl</th>\n<th align=\"center\">Shout</th>\n<th align=\"center\">MapURL</th>\n<th align=\"center\">City</th>\n<th align=\"center\">State</th>\n<th align=\"center\">Country</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">July 06, 2014 at 07:07PM</td>\n<td align=\"center\">Third Floor Espresso (3FE)</td>\n<td align=\"center\">http://4sq.com/rtEJWP</td>\n<td align=\"center\"></td>\n<td align=\"center\"><a href=\"http://maps.google.com/maps/api/staticmap?center=53.33998,-6.242084&amp;zoom=16&amp;size=710x440&amp;maptype=roadmap&amp;sensor=false&amp;markers=color:red%7C53.33998,-6.242084\">Map Link</a></td>\n<td align=\"center\">Dublin</td>\n<td align=\"center\"></td>\n<td align=\"center\">Republic of Ireland</td>\n</tr>\n<tr>\n<td align=\"center\">July 06, 2013 at 10:00AM</td>\n<td align=\"center\">Wooly Pig Cafe</td>\n<td align=\"center\">http://4sq.com/1n5Scct</td>\n<td align=\"center\"></td>\n<td align=\"center\"><a href=\"http://maps.google.com/maps/api/staticmap?center=37.76522,-122.460266&amp;zoom=16&amp;size=710x440&amp;maptype=roadmap&amp;sensor=false&amp;markers=color:red%7C53.33842395309077,-6.234097712535167\">Map Link</a></td>\n<td align=\"center\">San Francisco</td>\n<td align=\"center\">California</td>\n<td align=\"center\">United States of America</td>\n</tr>\n</tbody>\n</table>",
            "summary": "<p>I've always used Foursquare as a way to remember the places I had visited while traveling. Foursquare isn't really meant to be used in this way, and as a result, they don't make it easy to answer the question, \"what was that restaurant I went to last time I was here?\" I'm now using IFTTT to log all my checkins to a text file in my Dropbox account.</p>\n",
            "date_published": "2014-07-06T00:00:00-07:00",
            "author": {
                "name": "Ryan M",
                "url": "https://ryanmo.co/author/ryan-m.html"
            },
            "tags": [
                "markdown",
                "automation",
                "bash",
                "ifttt"
            ]
        },
        {
            "id": "https://ryanmo.co/2014/05/10/show-time-in-multiple-time-zones-with-textexpander",
            "url": "https://ryanmo.co/2014/05/10/show-time-in-multiple-time-zones-with-textexpander",
            "title": "Show Time in Multiple Time Zones with TextExpander",
            "content_html": "<p>I'm really bad at converting a time to other timezones. Now that the company I work for has offices in multiple countries, scheduling has become much more difficult. In an effort to eliminate the need for people to convert times themselves, I wrote a TextExpander snippet to take care of it for me.</p>\n\n\n<p>There are tons of tools out there that show you what time it is in other parts of the world. One thing that isn't as readily available is a quick way to tell me what time it would be in California if it's 3:00pm in Dublin. I decided to write a quick TextExpander snippet that would let me pick the time and then it would output the time in all of my chosen time zones. </p>\n<p>The first step is to choose the time zones that you want to appear. In my case, I chose the following since we have offices in these locations:</p>\n<ul>\n<li>Europe/Dublin</li>\n<li>America/Los_Angeles</li>\n<li>America/Chicago</li>\n</ul>\n<p>Now I need to convert a chosen time to all of these time zones. This can be done using the <code>date</code> command in bash. Here's a quick example to try in the Terminal:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">TZ=Europe/Dublin date -jf &quot;%H:%M %z&quot; &quot;$(date &quot;+%H:%M %z&quot;)&quot; &quot;+%H:%M %Z&quot;</span>\n</code></pre></div>\n\n<ul>\n<li>TZ lets you choose the time zone for the <code>date</code> command</li>\n<li>-f tells <code>date</code> the format to expect for the input</li>\n<li>-j tells <code>date</code> to not change the date allowing the -f flag to convert a time</li>\n<li>\"$(date \"+%H:%M %z\")\" just gives the current date that looks like HH:MM +0100</li>\n<li>\"+%H:%M %Z\" is the output format</li>\n</ul>\n<p>This gives you the following result:</p>\n<p>04:52 IST</p>\n<p>Now to do this for multiple time zones:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nv\">timezones</span><span class=\"o\">=(</span> <span class=\"s2\">&quot;America/Los_Angeles&quot;</span> <span class=\"s2\">&quot;America/Chicago&quot;</span> <span class=\"s2\">&quot;Europe/Dublin&quot;</span><span class=\"o\">)</span>\n\n<span class=\"k\">for</span> zone <span class=\"k\">in</span> <span class=\"si\">${</span><span class=\"nv\">timezones</span><span class=\"p\">[@]</span><span class=\"si\">}</span>\n<span class=\"k\">do</span>\n    <span class=\"nv\">TZ</span><span class=\"o\">=</span><span class=\"nv\">$zone</span> date -jf <span class=\"s2\">&quot;%H:%M %z&quot;</span> <span class=\"s2\">&quot;</span><span class=\"k\">$(</span>date <span class=\"s2\">&quot;+%H:%M %z&quot;</span><span class=\"k\">)</span><span class=\"s2\">&quot;</span> <span class=\"s2\">&quot;+%H:%M %Z&quot;</span><span class=\"p\">;</span>\n<span class=\"k\">done</span>\n</code></pre></div>\n\n<p>Which gives:</p>\n<p>08:55 PDT<br />\n10:55 CDT<br />\n16:55 IST  </p>\n<p>Lastly, let's add in some TextExpander input methods, and we have a way to use this with whatever time we want:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"ch\">#! /bin/bash</span>\n\n/* \nEnter a <span class=\"nb\">time</span> using 24H. <span class=\"m\">1</span>:30pm is <span class=\"m\">13</span>:30\n*/\n<span class=\"nv\">ENTERTIME</span><span class=\"o\">=</span><span class=\"s2\">&quot;%filltext:name=Hour:width=2%:%filltext:name=Minute:width=2%&quot;</span>\n\n<span class=\"nv\">timezones</span><span class=\"o\">=(</span> <span class=\"s2\">&quot;America/Los_Angeles&quot;</span> <span class=\"s2\">&quot;America/Chicago&quot;</span> <span class=\"s2\">&quot;Europe/Dublin&quot;</span> <span class=\"o\">)</span>\n\n<span class=\"k\">for</span> zone <span class=\"k\">in</span> <span class=\"si\">${</span><span class=\"nv\">timezones</span><span class=\"p\">[@]</span><span class=\"si\">}</span>\n<span class=\"k\">do</span>\n        <span class=\"nv\">TZ</span><span class=\"o\">=</span><span class=\"nv\">$zone</span> date -jf <span class=\"s2\">&quot;%H:%M %z&quot;</span> <span class=\"s2\">&quot;</span><span class=\"nv\">$ENTERTIME</span><span class=\"s2\"> </span><span class=\"k\">$(</span>date <span class=\"s2\">&quot;+%z&quot;</span><span class=\"k\">)</span><span class=\"s2\">&quot;</span> <span class=\"s2\">&quot;+%H:%M %Z&quot;</span><span class=\"p\">;</span>\n<span class=\"k\">done</span>\n</code></pre></div>",
            "summary": "<p>I'm really bad at converting a time to other timezones. Now that the company I work for has offices in multiple countries, scheduling has become much more difficult. In an effort to eliminate the need for people to convert times themselves, I wrote a TextExpander snippet to take care of it for me.</p>\n",
            "date_published": "2014-05-10T00:00:00-07:00",
            "author": {
                "name": "Ryan M",
                "url": "https://ryanmo.co/author/ryan-m.html"
            },
            "tags": [
                "bash",
                "automation",
                "textexpander"
            ]
        },
        {
            "id": "https://ryanmo.co/2014/03/01/digitizing-the-family-photos",
            "url": "https://ryanmo.co/2014/03/01/digitizing-the-family-photos",
            "title": "Digitizing the Family Photos",
            "content_html": "<p>I had this ongoing fear that all of our family photos would get lost or destroyed. I've always wanted to have a central place for all of my photos, both past and present. In early 2012, my mom and I started on a project to scan, crop and organize all of our old photos from negatives.</p>\n\n\n<h1 id=\"going-digital\">Going Digital</h1>\n<p>I was fortunate that when I decided to take on this project, my mom already had two large Epson flatbed scanners with transparency adapters. What was even better was that my mom was highly organized over the years and archived all of the negatives of every photo she had ever taken. This only left us with one thing to do: scan the photos.  Since I was living in California and my mom in Montana, the work of pulling the negatives and scanning them was going to be done by my mom. We also needed to have a way to transfer the files from her computer to mine. Dropbox was an obvious choice in this case, but there was one problem that would complicate everything: hard drive space. </p>\n<p>My mom was still using her PowerMac G5 at the time and hard drive space was pretty limited. It wouldn't have taken long before she wouldn't have enough space to even scan the photos. As a simple solution, once the scans were uploaded and synced to my computer, I could have manually removed the files and place them on my own computer, but I was lazy and didn't want to check constantly whether new files had been added. At the time, I was just learning how to code and thought this would be good practice <sup id=\"fnref:1\"><a class=\"footnote-ref\" href=\"#fn:1\">1</a></sup>. I ended up writing a script that would mirror the folder structure for the scans in our Dropbox shared folder on my local Desktop and then remove the original file in Dropbox. The old folder structure was maintained so that if any new files were added to the same folder, my mom wouldn't have to recreate them. I then set this up as a cron job to run once a day and then send me an email digest of all the files that were transferred.</p>\n<p>After a couple of weeks, I had nearly 15 years of photos in folders organized by year totaling around 85GB. Each Photoshop file was around 1.GB each and the photos were scanned at 300dpi. Now the hardest and longest part of the project was about to begin.</p>\n<p><img alt=\"Folder Structure\" src=\"https://ryanmo.co/2014/03/01/digitizing-the-family-photos/folders.png\" /></p>\n<h1 id=\"cropping-resizing-and-renaming\">Cropping, Resizing, and Renaming</h1>\n<p>I wasn't entirely sure how I was going to do this part efficiently. My mom hadn't laid out the photos in a symmetric grid and there wasn't a reliable way to detect photo borders. I also decided beforehand that I wanted to preserve the original files and so I would save an individual Photoshop file for each photo that was cropped. I then wanted to have a separate folder that was simply for viewing the files.</p>\n<p>Starting off, I wanted to try manually doing everything and automate things over time. Cropping the files using the marquee tool was always going to be manual. I would select the file, copy it, create a new file with the dimensions from the clipboard and then paste the photo into the new file. After I had gone through the entire file, I would save all the files at once with random names (you'll see later why the naming here didn't matter). This part immediately became tedious. I did some research on how I could make this easier or faster and discovered Photoshop actions<sup id=\"fnref:2\"><a class=\"footnote-ref\" href=\"#fn:2\">2</a></sup>. What was great about this was I was able to record every step I was taking into one single keyboard shortcut. This broke down the process to simply selecting the photo and hitting shift-F1. This one keyboard shortcut took care of copying the file, creating a new file with the dimensions of the clipboard, pasting and then finally selecting the previous file. That last step was key. Instead of a final control-tab to move back to the original file, the action took care of it for me. You can download the Photoshop action <a href=\"https://ryanmo.co/2014/03/01/digitizing-the-family-photos/Scans.atn\">here</a>.</p>\n<p><img alt=\"Actions Screenshot\" src=\"https://ryanmo.co/2014/03/01/digitizing-the-family-photos/actions_screenshot.png\" /></p>\n<p>At this point, I had an original Photoshop file and a folder called Cropped where all the new photos lived. I now needed a way to rename these files to something meaningful. Automator and Alfred made this simple. After I finished cropping, I would select all of the newly created files, run my Alfred extension \"Rename Scans\" which would trigger an automator script, prompt me to name the files, and then each file would be renamed from something like Untitled1.psd to November 1987_1.psd.</p>\n<p>At this point, the final step for each of these files was to create a viewable JPG for every photo. Turns out, Photoshop has a great feature called Image Processor. After the files were neatly renamed, I would open up the Image Processor, select the folder, and hit go. My settings were always saved so there wasn't much else to be done each time I ran this. I would take the Photoshop files, create a new JPG at 5 quality in a new folder called Low Res Images with the same naming convention. </p>\n<p><img alt=\"Image Processor\" src=\"https://ryanmo.co/2014/03/01/digitizing-the-family-photos/image_processor.png\" /></p>\n<p>I was then able to share this folder back with my mom and the rest of my family. They enjoyed watching the photos get added over the last year or so as I casually worked on the files.</p>\n<p>Once I had done all of the steps for each file, I would move the folder of PSD files into a folder called Done. This simply gave me a better idea of how many folders I had left to work on.</p>\n<h1 id=\"viewing\">Viewing</h1>\n<p>In late January 2014, I finally finished cropping all of the photos. I never intended on it taking quite this long, but it was never something that needed to have a deadline. It felt great to know that I was finally done and could just sit back and look at all of the old photos from what I was little. I was using <a href=\"http://www.lynapp.com\">Lyn</a> to view all the photos and realized that something was a little off. All of the photos were out of order. All of the folders had been named as Month Year, and even if I was viewing all of the photos at the same time, they were sorted in the order that I had created the files, not the time they were actually taken. I couldn't sort them in a photo viewer, Dropbox's photo tab would sort them by file creation and not EXIF date taken, and using Spotlight search was more-or-less pointless. There was no way  that I was going to manually date 3,300 photos by hand. I had used the command line tool <a href=\"http://www.sno.phy.queensu.ca/~phil/exiftool/\">exiftools</a> a few times, and I started looking into whether this would be a possibility for dating the files. It turned out that the command was really straightforward for naming a folder</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">exiftool</span> <span class=\"s2\">&quot;-AllDates=1999:12:31 12:00:00&quot;</span> <span class=\"n\">foldername</span><span class=\"o\">/</span>\n</code></pre></div>\n\n<p>Even though I could have done it by hand, I didn't really want to have to type this in for 80 or so folders of photos. I quickly wrote up a Python script that would parse out the date from the folder names and prompt me to confirm whether this was correct or not. I was fine hitting Enter 80 times. </p>\n<p>Some of the folders were called things like January-March 1995. For these cases, I would just assume the first month for the date. I wasn't going for perfection, but rather a good estimate for the time the photos were taken.</p>\n<p>You can take a look at the script <a href=\"https://ryanmo.co/2014/03/01/digitizing-the-family-photos/convert_exif_dates.py\">here</a>. Do note that the script is really specific to my folder structure so it might not work perfectly for you, but it'll be a good start if you need to do something like this.</p>\n<p><img alt=\"Lyn App\" src=\"https://ryanmo.co/2014/03/01/digitizing-the-family-photos/lynapp.png\" /></p>\n<h1 id=\"what-i-learned\">What I Learned</h1>\n<p>Epson now makes a <a href=\"http://www.epson.com/cgi-bin/Store/jsp/Product.do?BV_UseBVCookie=yes&amp;sku=B11B178061\">scanner</a> that eliminates a lot of the hard work around cropping the photos. It's expensive, but it would have saved me a lot of work.</p>\n<p>I've made this comment before, but I still would love to have a way to embed facial recognition into the metadata of photos. My perfect world would be having the ability to do something like search for all of the photos of my brother before 1995.</p>\n<p>Ultimately, this was a long, but satisfying project. I sleep better at night knowing that all of our family photos are backed up and not be lost forever if there were ever to be a disaster.</p>\n<div class=\"footnote\">\n<hr />\n<ol>\n<li id=\"fn:1\">\n<p>For those who want to see the script, <a href=\"https://ryanmo.co/2014/03/01/digitizing-the-family-photos/movescans.py\">here</a> it is. Please don't judge me. This was actually one of my first real scripts I had ever written. I know there are better ways to do a lot of it.&#160;<a class=\"footnote-backref\" href=\"#fnref:1\" title=\"Jump back to footnote 1 in the text\">&#8617;</a></p>\n</li>\n<li id=\"fn:2\">\n<p>I'm a total Photoshop newb&#160;<a class=\"footnote-backref\" href=\"#fnref:2\" title=\"Jump back to footnote 2 in the text\">&#8617;</a></p>\n</li>\n</ol>\n</div>",
            "summary": "<p>I had this ongoing fear that all of our family photos would get lost or destroyed. I've always wanted to have a central place for all of my photos, both past and present. In early 2012, my mom and I started on a project to scan, crop and organize all of our old photos from negatives.</p>\n",
            "date_published": "2014-03-01T00:00:00-08:00",
            "author": {
                "name": "Ryan M",
                "url": "https://ryanmo.co/author/ryan-m.html"
            },
            "tags": [
                "python",
                "alfred",
                "hazel",
                "dropbox",
                "bash",
                "photos"
            ]
        },
        {
            "id": "https://ryanmo.co/2013/03/31/bashprofile",
            "url": "https://ryanmo.co/2013/03/31/bashprofile",
            "title": "Your .bash_profile everywhere",
            "content_html": "<p>I have two computers, one for work and one for personal. I keep mostly everything separate, but one thing I want to always have with me is my terminal environment and aliases. With Dropbox, I can not only access, but edit my .bash_profile from anywhere <em>without</em> using symlinks.</p>\n\n\n<p>The first thing to do is figure out where you want to keep your .bash_profile in your Dropbox account. I keep mine in a folder called Sync that's shared between my work and personal Dropbox accounts. To move your .bash_profile, use the following command in Terminal:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">mv ~/.bash_profile ~/path/to/Dropbox/.bash_profile</span>\n</code></pre></div>\n\n<p>Once you've moved it here, create a new .bash_profile in your home directory and add the single line:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">source ~/that/path/to/.bash_profile</span>\n</code></pre></div>\n\n<p>Thats it! From now on, just point the local .bash_profile to the one location in your Dropbox folder.</p>",
            "summary": "<p>I have two computers, one for work and one for personal. I keep mostly everything separate, but one thing I want to always have with me is my terminal environment and aliases. With Dropbox, I can not only access, but edit my .bash_profile from anywhere <em>without</em> using symlinks.</p>\n",
            "date_published": "2013-03-31T00:00:00-07:00",
            "author": {
                "name": "Ryan M",
                "url": "https://ryanmo.co/author/ryan-m.html"
            },
            "tags": [
                "dropbox",
                "automation",
                "bash"
            ]
        }
    ],
    "title": "ryanmo.co",
    "version": "https://jsonfeed.org/version/1"
}