{
    "author": {
        "name": "Ryan M"
    },
    "favicon": "https://ryanmo.co/images/favicon.png",
    "feed_url": "https://ryanmo.co/feeds/tag/pelican.json",
    "home_page_url": "https://ryanmo.co",
    "items": [
        {
            "id": "https://ryanmo.co/2017/05/18/json-feed-in-pelican",
            "url": "https://ryanmo.co/2017/05/18/json-feed-in-pelican",
            "title": "JSON Feed in Pelican",
            "content_html": "<p>Brent Simmons and Manton Reece recently <a href=\"https://jsonfeed.org/2017/05/17/announcing_json_feed\">announced</a> an alternative to RSS and Atom using JSON. The format is straight forward and seemed like a great fit to implement in Pelican.</p>\n<p>I've been spending a considerable amount of my time lately writing Apex code (Salesforce's proprietary language similar to Java and C#) and have come to appreciate it's ability to serialize different objects. Python isn't particularly good at this, and so I initially struggled with coming up with a clean way of implementing the generator. The new JSON feed spec has many nested objects and so representing these as separate classes made sense. Let's look at an author</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">Author</span><span class=\"p\">(</span><span class=\"n\">Object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">avatar</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">url</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">avatar</span> <span class=\"o\">=</span> <span class=\"n\">avatar</span>\n</code></pre></div>\n\n<p>This is a basic representation of an author based on JSON feed's <a href=\"https://jsonfeed.org/version/1\">spec</a>. If we were to simply try to serialize this in Python using the <code>json</code> library, we'd come across this exception</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"ne\">TypeError</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">__main__</span><span class=\"o\">.</span><span class=\"n\">Author</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x107d23e10</span><span class=\"o\">&gt;</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">JSON</span> <span class=\"n\">serializable</span>\n</code></pre></div>\n\n<p>The <code>json</code> library allows you to pass in your own custom parser, and so I created a base class for all my my objects that would contain one method that the parser would look for as a way to tell it how to serialize each class.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">JSONEncoder</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">JSONEncoder</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">default</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"s1\">&#39;as_json&#39;</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">as_json</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">JSONEncoder</span><span class=\"o\">.</span><span class=\"n\">default</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Base</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">as_json</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Author</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">avatar</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">url</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">avatar</span> <span class=\"o\">=</span> <span class=\"n\">avatar</span>\n</code></pre></div>\n\n<p>Now we can call the same method, while passing in our custom JSON encoder to serialize our class</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Author</span><span class=\"p\">(</span><span class=\"s1\">&#39;Ryan M&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"bp\">cls</span><span class=\"o\">=</span><span class=\"n\">JSONEncoder</span><span class=\"p\">)</span>\n<span class=\"c1\"># &#39;{&quot;url&quot;: null, &quot;name&quot;: &quot;Ryan M&quot;, &quot;avatar&quot;: null}&#39;</span>\n</code></pre></div>\n\n<p>Now it's just a matter of building a class for each object in the JSON feed top-level object</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">Item</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"c1\"># a list of Item classes, since there are many</span>\n<span class=\"k\">class</span> <span class=\"nc\">Items</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">):</span>\n      <span class=\"c1\"># list type doesn&#39;t have a __dict__ accessor, so we just return the list to be serialized</span>\n    <span class=\"k\">def</span> <span class=\"nf\">as_json</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n<span class=\"c1\"># The top-level JSON feed object containing all child objects</span>\n<span class=\"k\">class</span> <span class=\"nc\">JsonFeed</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div>\n\n<p>I've left out the implementation details for generating each of these objects for brevity, but the idea is all there. Each class now knows how to tell the <code>json</code> encoder how to be serialized, so it's just a matter of implementing the Pelican plugin and writing the output.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">JsonFeedGenerator</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">article_generator</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">articles</span> <span class=\"o\">=</span> <span class=\"n\">article_generator</span><span class=\"o\">.</span><span class=\"n\">articles</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"n\">article_generator</span><span class=\"o\">.</span><span class=\"n\">settings</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">article_generator</span><span class=\"o\">.</span><span class=\"n\">context</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">generator</span> <span class=\"o\">=</span> <span class=\"n\">article_generator</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;feed.json&#39;</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">site_url</span> <span class=\"o\">=</span> <span class=\"n\">article_generator</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;SITEURL&#39;</span><span class=\"p\">,</span>\n                                                      <span class=\"n\">path_to_url</span><span class=\"p\">(</span><span class=\"n\">get_relative_path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">)))</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">feed_domain</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;FEED_DOMAIN&#39;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">feed_url</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"si\">{}</span><span class=\"s1\">/</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">feed_domain</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">write_feed</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">complete_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">output_path</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">makedirs</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">complete_path</span><span class=\"p\">))</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n\n        <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">complete_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;w&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">JsonFeed</span><span class=\"o\">.</span><span class=\"n\">from_generator</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">),</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"bp\">cls</span><span class=\"o\">=</span><span class=\"n\">JSONEncoder</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_generators</span><span class=\"p\">(</span><span class=\"n\">article_generator</span><span class=\"p\">):</span>\n    <span class=\"n\">json_feed_generator</span> <span class=\"o\">=</span> <span class=\"n\">JsonFeedGenerator</span><span class=\"p\">(</span><span class=\"n\">article_generator</span><span class=\"p\">)</span>\n    <span class=\"n\">json_feed_generator</span><span class=\"o\">.</span><span class=\"n\">write_feed</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">register</span><span class=\"p\">():</span>\n    <span class=\"n\">signals</span><span class=\"o\">.</span><span class=\"n\">article_generator_finalized</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">get_generators</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>You can see the feed for this blog <a href=\"/feed.json\">here</a>. The source for the entire plugin can be found on Github <a href=\"https://github.com/rjames86/myblog/tree/master/pelican_site/plugins/json_feed\">here</a>. The plugin should work for all sites right now. I chose not to implement multiple languages into the feed since it doesn't seem like the spec supports this. Hopefully they consider this as they improve the format.</p>",
            "date_published": "2017-05-18T07:28:00-07:00",
            "author": {
                "name": "Ryan M",
                "url": "https://ryanmo.co/author/ryan-m.html"
            },
            "tags": [
                "pelican",
                "python"
            ]
        },
        {
            "id": "https://ryanmo.co/2016/08/19/publishing-from-day-one-to-pelican-with-hazel-and-dropbox",
            "url": "https://ryanmo.co/2016/08/19/publishing-from-day-one-to-pelican-with-hazel-and-dropbox",
            "title": "Publishing from Day One to Pelican with Hazel and Dropbox",
            "content_html": "<p>I'll be soon embarking on a long bike tour and was searching for a way to keep a journal of my trip but also post updates to a website. Day One was an obvious journaling choice, but with version 2, publishing isn't yet available. With a little poking around, it turned out to be fairly easy to export Day One entries and publish to Pelican (my static blog generator of choice).</p>\n\n\n<p>I've not been a heavy user of Day One, and with the new version, I've stopped entirely until they provide end-to-end encryption with their proprietary sync service. Journaling my bike trip isn't anything I'm worried about being out in the open, and so I'll use it to keep a log of my days on the trip. At the same time, I want to keep my friends and family up-to-date on my trip. Since I use Pelican for this site, it seemed like a reasonable choice to use it for this trip and use Github Pages as an easy, free place to host it.</p>\n<p>The first step was getting the Pelican site set up. I used the basic quickstart and put in a custom theme that I found online. The only modifications I made was using the <a href=\"https://github.com/getpelican/pelican-plugins/tree/master/photos\">photos plugin</a> to make it easier to add galleries if I want in the future. Publishing to Github Pages is trivial. You can follow the steps <a href=\"http://docs.getpelican.com/en/3.6.3/tips.html#publishing-to-github\">here</a>.</p>\n<p>Now the fun part. Day One lets you export a journal entry as Markdown. When exported, it's compressed into a zip file which includes a folder of photos if you've included any in the journal entry. For each post, I use the export action and then upload to a folder I've created in Dropbox. I have Hazel watching this folder which will do the following:</p>\n<ol>\n<li>Unarchive any file that appears</li>\n<li>Move the unarchived contents into a new folder I unoriginally name \"decompressed\"</li>\n</ol>\n<p><img alt=\"unarchive\" src=\"https://ryanmo.co/posts/Tech/2016-08-19/unarchive.png\" /></p>\n<p>I then have a separate rule watching \"decompressed\" which will</p>\n<ol>\n<li>Move any image file type into my blog's images folder</li>\n<li>Move any text file into the content folder</li>\n</ol>\n<p><img alt=\"move_text\" src=\"https://ryanmo.co/posts/Tech/2016-08-19/move_text.png\" /></p>\n<p>Step 2 here requires a little bit of extra work. Day One has some weird formatting issues and I also need to update the image urls in the entry to match what Pelican expects. The script isn't my finest, but it takes care of everything</p>\n<table class=\"codehilitetable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39</pre></div></td><td class=\"code\"><div class=\"codehilite\"><pre><span></span><code><span class=\"ch\">#!/usr/bin/python</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">codecs</span>\n<span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n\n<span class=\"n\">input_file</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">codecs</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">input_file</span><span class=\"p\">,</span>\n                <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;r&#39;</span><span class=\"p\">,</span>\n                <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">&#39;utf-8&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get rid of the tabs that DayOne inserts</span>\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">Date:&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Date:&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">Weather:&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Weather:&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">Location:&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Location:&#39;</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Replace default Markdown image syntax with Pelican&#39;s syntax + photos plugin</span>\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;![](photos/&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;![](</span><span class=\"si\">{photo}</span><span class=\"s1\">/&#39;</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">title_re</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">&#39;\\n\\n#\\s+(.*)\\n&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">title_search</span> <span class=\"o\">=</span> <span class=\"n\">title_re</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n<span class=\"n\">now_datestring</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s1\">&#39;%B </span><span class=\"si\">%d</span><span class=\"s1\">, %Y at %H:%M:%S %Z&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># We need a title: header for Pelican</span>\n<span class=\"k\">if</span> <span class=\"n\">title_search</span><span class=\"p\">:</span>\n    <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Title: </span><span class=\"si\">%s</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">title_search</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">f</span>\n    <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">title_re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Title: Update </span><span class=\"si\">%s</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">now_datestring</span> <span class=\"o\">+</span> <span class=\"n\">f</span>\n\n<span class=\"k\">if</span> <span class=\"s2\">&quot;Date:&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Date: </span><span class=\"si\">%s</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">now_datestring</span> <span class=\"o\">+</span> <span class=\"n\">f</span>\n\n<span class=\"k\">with</span> <span class=\"n\">codecs</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">input_file</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;w&#39;</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">&#39;utf-8&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">new_file</span><span class=\"p\">:</span>\n    <span class=\"n\">new_file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n</code></pre></div>\n</td></tr></table>\n<p>Now the file is cleaned up and in the right place. We can now publish and push to Github.</p>\n<table class=\"codehilitetable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13</pre></div></td><td class=\"code\"><div class=\"codehilite\"><pre><span></span><code><span class=\"ch\">#!/bin/bash</span>\n\n<span class=\"nb\">cd</span> ~/Dropbox/blogs/biketour/pelican_site\n\nmake publish\n\ngit add ..\n\ngit commit -am <span class=\"s1\">&#39;update blog&#39;</span>\n\n/Users/rjames/dev/pelican/bin/ghp-import output\n\ngit push git@github.com:rjames86/rjames86.github.io.git gh-pages:master\n</code></pre></div>\n</td></tr></table>\n<p>That's it! You can see the posts and follow my bike tour at <a href=\"http://rjames86.github.io\">http://rjames86.github.io</a></p>",
            "summary": "<p>I'll be soon embarking on a long bike tour and was searching for a way to keep a journal of my trip but also post updates to a website. Day One was an obvious journaling choice, but with version 2, publishing isn't yet available. With a little poking around, it turned out to be fairly easy to export Day One entries and publish to Pelican (my static blog generator of choice).</p>\n",
            "date_published": "2016-08-19T11:02:00-07:00",
            "author": {
                "name": "Ryan M",
                "url": "https://ryanmo.co/author/ryan-m.html"
            },
            "tags": [
                "hazel",
                "pelican",
                "automation",
                "dropbox"
            ]
        },
        {
            "id": "https://ryanmo.co/2015/09/14/adding-critical-css-in-pelican",
            "url": "https://ryanmo.co/2015/09/14/adding-critical-css-in-pelican",
            "title": "Adding Critical CSS in Pelican",
            "content_html": "<p>As it turns out, adding <a href=\"http://www.smashingmagazine.com/2015/08/understanding-critical-css/\">critical css</a> wasn't trivial, but didn't take as much effort as I had originally thought. My site's layout doesn't contain <em>that</em> much styling, and so I simply added all of my CSS as an inline <code>style</code> tag. The tricky part, was getting Jinja to play nicely.</p>\n<p>The first step was to generate a separate css file that only contained what was needed when you first load and see the page. I use Less as my pre-processor, and created a very small Less file that looked like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">@</span><span class=\"k\">import</span> <span class=\"o\">(</span><span class=\"nt\">inline</span><span class=\"o\">)</span> <span class=\"s1\">&#39;../tipuesearch/tipuesearch.css&#39;</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"k\">import</span> <span class=\"s1\">&#39;default_mobile.less&#39;</span><span class=\"p\">;</span>\n<span class=\"p\">@</span><span class=\"k\">import</span> <span class=\"s1\">&#39;largescreens.less&#39;</span><span class=\"p\">;</span>\n</code></pre></div>\n\n<p>Once compiled and minimized<sup id=\"fnref:1\"><a class=\"footnote-ref\" href=\"#fn:1\">1</a></sup>, I needed to add it to my <code>base.html</code> template.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"x\">&lt;style type=&quot;text/css&quot;&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">include</span> <span class=\"s1\">&#39;critical.css&#39;</span> <span class=\"cp\">%}</span><span class=\"x\"></span>\n<span class=\"x\">&lt;/style&gt;</span>\n</code></pre></div>\n\n<p>Here is where the problem when generating my site.</p>\n<div class=\"codehilite\"><pre><span></span><code>WARNING: Caught exception <span class=\"s2\">&quot;TemplateSyntaxError: Missing end of comment tag&quot;</span>. Reloading.\n</code></pre></div>\n\n<p>Since my minimized CSS contained <code>'{#'</code>, Jinja was interpreting this as a comment and raised an exception. While this is an easy fix by changing the Jinja environment variables within Pelican's generators.py, I didn't want to go this route since I would need to update this<sup id=\"fnref:2\"><a class=\"footnote-ref\" href=\"#fn:2\">2</a></sup> every time there was an update to Pelican. Instead, I wrote a Jinja extension which Pelican supports natively. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\"># in pelicanconf.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">jinja2.ext</span> <span class=\"kn\">import</span> <span class=\"n\">Extension</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomCommentStrings</span><span class=\"p\">(</span><span class=\"n\">Extension</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">environment</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">CustomCommentStrings</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">environment</span><span class=\"p\">)</span>\n\n        <span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">comment_start_string</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;###&#39;</span>\n        <span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">comment_end_string</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/###&#39;</span>\n\n<span class=\"n\">JINJA_EXTENSIONS</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">CustomCommentStrings</span><span class=\"p\">]</span>\n</code></pre></div>\n\n<hr />\n<p><em>Update 2017-01-05</em></p>\n<p>If you're using Pelican version 3.7+, you don't have to write the custom extension shown above, you can simply update the <code>JINJA_ENVIRONMENT</code> settings variable:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">JINJA_ENVIRONMENT</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;comment_start_string&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;###&#39;</span><span class=\"p\">,</span> \n    <span class=\"s1\">&#39;comment_end_string&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;/###&#39;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n<hr />\n<p>One thing to note here is that if you are using <code>{# ... #}</code> as comment strings in Jinja, you'll need to update them to whatever new start and end strings you define.</p>\n<p>And success! The <code>critical.css</code> file was successfully imported and I now my critical CSS is included on page load. With this, Google now gives me a 100/100 speed score for mobile and 98/100 on desktop.</p>\n<div class=\"footnote\">\n<hr />\n<ol>\n<li id=\"fn:1\">\n<p>Google suggests that you minimize critical css to reduce your file size.&#160;<a class=\"footnote-backref\" href=\"#fnref:1\" title=\"Jump back to footnote 1 in the text\">&#8617;</a></p>\n</li>\n<li id=\"fn:2\">\n<p>I plan on submitting a pull-request to allow manually setting Jinja environment variables.&#160;<a class=\"footnote-backref\" href=\"#fnref:2\" title=\"Jump back to footnote 2 in the text\">&#8617;</a></p>\n</li>\n</ol>\n</div>",
            "date_published": "2015-09-14T07:41:00-07:00",
            "date_modified": "2017-01-05T20:45:00-08:00",
            "author": {
                "name": "Ryan M",
                "url": "https://ryanmo.co/author/ryan-m.html"
            },
            "tags": [
                "pelican",
                "automation",
                "python"
            ]
        },
        {
            "id": "https://ryanmo.co/2015/09/12/improving-your-sites-load-times",
            "url": "https://ryanmo.co/2015/09/12/improving-your-sites-load-times",
            "title": "Improving Your Site's Load Times",
            "content_html": "<p>While reading through my RSS feeds the other night, I came across <a href=\"https://onetapless.com/whats-new-one-tap-less\">this</a> article from One Tap Less about what he did to improve load times on his site. My first thought was,  \"I use a static site, I don't need to worry about this\" and dismissed it. Then I figured, why not just try out my site on Google's <a href=\"https://developers.google.com/speed/pagespeed/insights/\">PageSpeed Insights</a>. Turns out, I had some work to do.</p>\n\n\n<p>When I initially ran the test, this site came back with a score of around 41/100 for both desktop and mobile. I would have been fine leaving it, but that was pretty bad. Google does a great job telling you what things need to be improved, even down to the specific files causing problems.</p>\n<p><img alt=\"file_specific\" src=\"https://ryanmo.co/posts/Tech/2015-09-12/file_specific.png\" /></p>\n<p>My first task was \"eliminating render-blocking JavaScript and CSS.\" I was lazily loading all of my JavaScript in the <code>&lt;head&gt;</code> tag, so this was as simple as moving that to the bottom of the page. Google also suggested using the <code>async</code> attribute.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">&lt;!-- Initial setup --&gt;</span>\n<span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">&quot;{{ DEFAULT_LANG }}&quot;</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">async</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&quot;{{ SITEURL }}/theme/js/main.js&quot;</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&quot;text/javascript&quot;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n  ...\n<span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n\n<span class=\"c\">&lt;!-- New setup --&gt;</span>\n...\n    <span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">async</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&quot;{{ SITEURL }}/theme/js/main.js&quot;</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&quot;text/javascript&quot;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n</code></pre></div>\n\n<p>Eliminating render-blocking CSS was a little more tricky. Google suggests inlining <a href=\"http://www.smashingmagazine.com/2015/08/understanding-critical-css/\">critical CSS</a>. I haven't taken the time to figure out which CSS that would require and how this would change my workflow. For now, I've taken their suggestion and load my CSS at the bottom of the page using a <code>&lt;script&gt;</code> tag.</p>\n<p><em>[Update 2015-09-14]</em>: I figured it out. You can read how I added the critical css <a href=\"{static}../2015-09-14/2015-09-14-critical_css.md\">here</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">&lt;</span><span class=\"nx\">script</span><span class=\"o\">&gt;</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">cb</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">l</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">&#39;link&#39;</span><span class=\"p\">);</span> <span class=\"nx\">l</span><span class=\"p\">.</span><span class=\"nx\">rel</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;stylesheet&#39;</span><span class=\"p\">;</span>\n    <span class=\"nx\">l</span><span class=\"p\">.</span><span class=\"nx\">href</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;{{ SITEURL }}/theme/css/style.css&quot;</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">h</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementsByTagName</span><span class=\"p\">(</span><span class=\"s1\">&#39;head&#39;</span><span class=\"p\">)[</span><span class=\"mf\">0</span><span class=\"p\">];</span> <span class=\"nx\">h</span><span class=\"p\">.</span><span class=\"nx\">parentNode</span><span class=\"p\">.</span><span class=\"nx\">insertBefore</span><span class=\"p\">(</span><span class=\"nx\">l</span><span class=\"p\">,</span> <span class=\"nx\">h</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">raf</span> <span class=\"o\">=</span> <span class=\"nx\">requestAnimationFrame</span> <span class=\"o\">||</span> <span class=\"nx\">mozRequestAnimationFrame</span> <span class=\"o\">||</span>\n      <span class=\"nx\">webkitRequestAnimationFrame</span> <span class=\"o\">||</span> <span class=\"nx\">msRequestAnimationFrame</span><span class=\"p\">;</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">raf</span><span class=\"p\">)</span> <span class=\"nx\">raf</span><span class=\"p\">(</span><span class=\"nx\">cb</span><span class=\"p\">);</span>\n  <span class=\"k\">else</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;load&#39;</span><span class=\"p\">,</span> <span class=\"nx\">cb</span><span class=\"p\">);</span>\n<span class=\"o\">&lt;</span><span class=\"err\">/script&gt;</span>\n</code></pre></div>\n\n<p>Ok. Easy stuff done. This put my site up into the 50's range. Good, but still not great. Let's tackle the one that's lowering my score the most: gzip compression and caching.</p>\n<p>I host my blog at the wonderful <a href=\"http://macminicolo.net\">macminicolo.net</a>, which means I control the server and have to do my own optimizations. Turns out, this really wasn't that hard to do. Here's how to easily enable compression in Apache.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"n\">Always</span><span class=\"w\"> </span><span class=\"n\">back</span><span class=\"w\"> </span><span class=\"n\">up</span><span class=\"w\"> </span><span class=\"n\">your</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"k\">file</span><span class=\"w\"> </span><span class=\"k\">before</span><span class=\"w\"> </span><span class=\"n\">changing</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">bunch</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"nf\">stuff</span><span class=\"w\"></span>\n<span class=\"n\">sudo</span><span class=\"w\"> </span><span class=\"n\">emacs</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">etc</span><span class=\"o\">/</span><span class=\"n\">apache2</span><span class=\"o\">/</span><span class=\"n\">httpd</span><span class=\"p\">.</span><span class=\"n\">conf</span><span class=\"w\"></span>\n\n<span class=\"err\">#</span><span class=\"w\"> </span><span class=\"n\">Make</span><span class=\"w\"> </span><span class=\"n\">sure</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"k\">is</span><span class=\"w\"> </span><span class=\"n\">enabled</span><span class=\"w\"></span>\n<span class=\"n\">LoadModule</span><span class=\"w\"> </span><span class=\"n\">deflate_module</span><span class=\"w\"> </span><span class=\"n\">libexec</span><span class=\"o\">/</span><span class=\"n\">apache2</span><span class=\"o\">/</span><span class=\"n\">mod_deflate</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n\n<span class=\"o\">&lt;</span><span class=\"n\">IfModule</span><span class=\"w\"> </span><span class=\"n\">mod_deflate</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"k\">Restrict</span><span class=\"w\"> </span><span class=\"n\">compression</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"n\">these</span><span class=\"w\"> </span><span class=\"n\">MIME</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">AddOutputFilterByType</span><span class=\"w\"> </span><span class=\"n\">DEFLATE</span><span class=\"w\"> </span><span class=\"nc\">text</span><span class=\"o\">/</span><span class=\"n\">plain</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">AddOutputFilterByType</span><span class=\"w\"> </span><span class=\"n\">DEFLATE</span><span class=\"w\"> </span><span class=\"nc\">text</span><span class=\"o\">/</span><span class=\"n\">html</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">AddOutputFilterByType</span><span class=\"w\"> </span><span class=\"n\">DEFLATE</span><span class=\"w\"> </span><span class=\"n\">application</span><span class=\"o\">/</span><span class=\"n\">xhtml</span><span class=\"o\">+</span><span class=\"nc\">xml</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">AddOutputFilterByType</span><span class=\"w\"> </span><span class=\"n\">DEFLATE</span><span class=\"w\"> </span><span class=\"nc\">text</span><span class=\"o\">/</span><span class=\"nc\">xml</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">AddOutputFilterByType</span><span class=\"w\"> </span><span class=\"n\">DEFLATE</span><span class=\"w\"> </span><span class=\"n\">application</span><span class=\"o\">/</span><span class=\"nc\">xml</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">AddOutputFilterByType</span><span class=\"w\"> </span><span class=\"n\">DEFLATE</span><span class=\"w\"> </span><span class=\"n\">application</span><span class=\"o\">/</span><span class=\"n\">x</span><span class=\"o\">-</span><span class=\"n\">javascript</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">AddOutputFilterByType</span><span class=\"w\"> </span><span class=\"n\">DEFLATE</span><span class=\"w\"> </span><span class=\"nc\">text</span><span class=\"o\">/</span><span class=\"n\">javascript</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">AddOutputFilterByType</span><span class=\"w\"> </span><span class=\"n\">DEFLATE</span><span class=\"w\"> </span><span class=\"n\">application</span><span class=\"o\">/</span><span class=\"n\">javascript</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">AddOutputFilterByType</span><span class=\"w\"> </span><span class=\"n\">DEFLATE</span><span class=\"w\"> </span><span class=\"n\">application</span><span class=\"o\">/</span><span class=\"n\">json</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">AddOutputFilterByType</span><span class=\"w\"> </span><span class=\"n\">DEFLATE</span><span class=\"w\"> </span><span class=\"nc\">text</span><span class=\"o\">/</span><span class=\"n\">css</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"k\">Level</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"n\">compression</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Highest</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Lowest</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">DeflateCompressionLevel</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"n\">Netscape</span><span class=\"w\"> </span><span class=\"mf\">4.</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"ow\">some</span><span class=\"w\"> </span><span class=\"n\">problems</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">BrowserMatch</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"n\">Mozilla</span><span class=\"o\">/</span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"n\">gzip</span><span class=\"o\">-</span><span class=\"k\">only</span><span class=\"o\">-</span><span class=\"nc\">text</span><span class=\"o\">/</span><span class=\"n\">html</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"n\">Netscape</span><span class=\"w\"> </span><span class=\"mf\">4.06</span><span class=\"o\">-</span><span class=\"mf\">4.08</span><span class=\"w\"> </span><span class=\"n\">have</span><span class=\"w\"> </span><span class=\"ow\">some</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">problems</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">BrowserMatch</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"n\">Mozilla</span><span class=\"o\">/</span><span class=\"mi\">4</span><span class=\"err\">\\</span><span class=\"mf\">.0</span><span class=\"o\">[</span><span class=\"n\">678</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">no</span><span class=\"o\">-</span><span class=\"n\">gzip</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"n\">MSIE</span><span class=\"w\"> </span><span class=\"n\">masquerades</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Netscape</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"k\">is</span><span class=\"w\"> </span><span class=\"n\">fine</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">BrowserMatch</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">bMSI</span><span class=\"o\">[</span><span class=\"n\">E</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"err\">!</span><span class=\"k\">no</span><span class=\"o\">-</span><span class=\"n\">gzip</span><span class=\"w\"> </span><span class=\"err\">!</span><span class=\"n\">gzip</span><span class=\"o\">-</span><span class=\"k\">only</span><span class=\"o\">-</span><span class=\"nc\">text</span><span class=\"o\">/</span><span class=\"n\">html</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"o\">&lt;</span><span class=\"n\">IfModule</span><span class=\"w\"> </span><span class=\"n\">mod_headers</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"n\">Make</span><span class=\"w\"> </span><span class=\"n\">sure</span><span class=\"w\"> </span><span class=\"n\">proxies</span><span class=\"w\"> </span><span class=\"n\">don</span><span class=\"err\">&#39;</span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"n\">deliver</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">wrong</span><span class=\"w\"> </span><span class=\"n\">content</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Header</span><span class=\"w\"> </span><span class=\"n\">append</span><span class=\"w\"> </span><span class=\"n\">Vary</span><span class=\"w\"> </span><span class=\"k\">User</span><span class=\"o\">-</span><span class=\"n\">Agent</span><span class=\"w\"> </span><span class=\"n\">env</span><span class=\"o\">=</span><span class=\"err\">!</span><span class=\"n\">dont</span><span class=\"o\">-</span><span class=\"n\">vary</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&lt;/</span><span class=\"n\">IfModule</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"o\">&lt;/</span><span class=\"n\">IfModule</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>Save and restart Apache</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">sudo /usr/sbin/apachectl restart</span>\n</code></pre></div>\n\n<p>You can test to be sure it's working by using <code>curl</code> on a file that matches any of the above content types. You should see <code>Content-Encoding: gzip</code> in the response headers.</p>\n<div class=\"codehilite\"><pre><span></span><code>curl -I -H <span class=\"s1\">&#39;Accept-Encoding: gzip,deflate&#39;</span> https://ryanmo.co/theme/js/main.js\n\n\nHTTP/1.1 <span class=\"m\">200</span> OK\nDate: Sat, <span class=\"m\">12</span> Sep <span class=\"m\">2015</span> <span class=\"m\">20</span>:38:24 GMT\nServer: Apache/2.4.10 <span class=\"o\">(</span>Unix<span class=\"o\">)</span> PHP/5.5.20 OpenSSL/0.9.8zd\nLast-Modified: Sat, <span class=\"m\">12</span> Sep <span class=\"m\">2015</span> <span class=\"m\">02</span>:47:24 GMT\nETag: <span class=\"s2\">&quot;38169-51f83da1c0700-gzip&quot;</span>\nAccept-Ranges: bytes\nVary: Accept-Encoding,User-Agent\nContent-Encoding: gzip\nCache-Control: max-age<span class=\"o\">=</span><span class=\"m\">2592000</span>\nExpires: Mon, <span class=\"m\">12</span> Oct <span class=\"m\">2015</span> <span class=\"m\">20</span>:38:24 GMT\nContent-Type: application/javascript\n</code></pre></div>\n\n<p>Next is content caching. This is also something to edit in the httpd.conf file for Apache. Google suggests at <em>least</em> 7 days for default caching, and up to a year for content that doesn't change often.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\"># Make sure this is uncommented</span>\nLoadModule expires_module libexec/apache2/mod_expires.so\n\n<span class=\"c1\">## EXPIRES CACHING ##</span>\n&lt;IfModule mod_expires.c&gt;\n    ExpiresActive On\n    ExpiresByType image/jpg <span class=\"s2\">&quot;access plus 1 year&quot;</span>\n    ExpiresByType image/jpeg <span class=\"s2\">&quot;access plus 1 year&quot;</span>\n    ExpiresByType image/gif <span class=\"s2\">&quot;access plus 1 year&quot;</span>\n    ExpiresByType image/png <span class=\"s2\">&quot;access plus 1 year&quot;</span>\n    ExpiresByType application/x-font-ttf <span class=\"s2\">&quot;access plus 1 year&quot;</span>\n    ExpiresByType text/css <span class=\"s2\">&quot;access plus 1 month&quot;</span>\n    ExpiresByType application/javascript <span class=\"s2\">&quot;access plus 1 month&quot;</span>\n    ExpiresByType image/x-icon <span class=\"s2\">&quot;access plus 1 year&quot;</span>\n    ExpiresDefault <span class=\"s2\">&quot;access plus 7 days&quot;</span>\n&lt;/IfModule&gt;\n<span class=\"c1\">## EXPIRES CACHING ##</span>\n</code></pre></div>\n\n<p>At this point, I was getting into the mid to high 80s for my score. Awesome. At this point, I could probably stop and be satisfied with the results. The remaining suggestions were easy, so I kept going. The first was to minimize all of my CSS and JavaScript. Easy. I just hit that checkbox in CodeKit and moved along. I did take one additional step here and took advantage of CodeKit's ability to combine JavaScript files into a single file by adding a header to my main JavaScript file.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\"># @codekit-prepend &quot;../js/jquery-1.10.1.min.js&quot;, &quot;../js/bigfoot.min.js&quot;;</span>\n</code></pre></div>\n\n<p>Lastly, Google suggested that I compress my images. They were even nice enough to provide a zipped file of all your CSS, JavaScript and images compressed for you. If I don't have to do the work, then I won't. I downloaded the file and replaced all my images with the ones they gave me. In the future, I'll be using <a href=\"https://imageoptim.com\">ImageOptim</a> to optimize the images on my site.</p>\n<p>My final score check: 91/100 on mobile and 97/100 on desktop! I think I can call that a success. Honestly, when trying to load my site on different devices, I didn't notice a significant increase. That being said, at least I'll be in Google's good graces for being a good web citizen, and I'll avoid any risk of them down-ranking my site for doing things incorrectly. I still want to take advantage of the critical CSS at some point, but I can leave that for another day.</p>",
            "summary": "<p>While reading through my RSS feeds the other night, I came across <a href=\"https://onetapless.com/whats-new-one-tap-less\">this</a> article from One Tap Less about what he did to improve load times on his site. My first thought was,  \"I use a static site, I don't need to worry about this\" and dismissed it. Then I figured, why not just try out my site on Google's <a href=\"https://developers.google.com/speed/pagespeed/insights/\">PageSpeed Insights</a>. Turns out, I had some work to do.</p>\n",
            "date_published": "2015-09-12T01:15:00-07:00",
            "author": {
                "name": "Ryan M",
                "url": "https://ryanmo.co/author/ryan-m.html"
            },
            "tags": [
                "pelican",
                "javascript",
                "scripting"
            ]
        },
        {
            "id": "https://ryanmo.co/2015/01/10/view-image-links-from-pelican-in-marked-2",
            "url": "https://ryanmo.co/2015/01/10/view-image-links-from-pelican-in-marked-2",
            "title": "View Image Links from Pelican in Marked 2",
            "content_html": "<p>I really enjoy writing in MultiMarkdown Composer and having Marked display a rendered version. When writing blog posts like this, images would never appear since Pelican's syntax for displaying images is <code>{static}/path/to/image</code>. I looked into Marked's preprocessor abilities and figured out a nice, clean way to display images when writing blog posts.</p>\n\n<p>In Marked's preferences under Advanced, there is an option to add your own preprocessor. This gives you the ability to format the text in the file before Marked renders the markdown.</p>\n<p><img alt=\"marked_preferences\" src=\"https://ryanmo.co/posts/Tech/2015-01-10/marked_preferences.png\" /></p>\n<p>The script simply looks for any occurrence of the <code>{static}</code> and replaces it with the path to my content folder in Pelican.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"ch\">#!/usr/bin/python</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"n\">home</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">(</span><span class=\"s1\">&#39;~&#39;</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PelicanFormat</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">blog_path</span> <span class=\"o\">=</span> <span class=\"n\">home</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;/Dropbox/blog/content&#39;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdin</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__str__</span><span class=\"p\">())</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">content</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">replace_filenames</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">&#39;</span><span class=\"si\">{static}</span><span class=\"s1\">&#39;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">blog_path</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">change_codeblocks</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        TODO Pelican uses &#39;:::language&#39; to override syntax highlighting.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">PelicanFormat</span><span class=\"p\">()</span>\n    <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">replace_filenames</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span> <span class=\"n\">p</span>\n</code></pre></div>\n\n<p>Now I can preview images for my blog posts instead of broken images.</p>\n<hr />\n<p><em>Bonus!</em></p>\n<p>This is a Text Expander snippet I use to create image urls for Pelican. It looks for the last file that was added to my images folder and then creates the url</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"ch\">#!/bin/bash</span>\n\n<span class=\"nv\">DROPBOX_PERSONAL</span><span class=\"o\">=</span><span class=\"k\">$(</span>python -c <span class=\"s2\">&quot;import json;f=open(&#39;</span><span class=\"nv\">$HOME</span><span class=\"s2\">/.dropbox/info.json&#39;, &#39;r&#39;).read();data=json.loads(f);print data.get(&#39;personal&#39;, {}).get(&#39;path&#39;, &#39;&#39;)&quot;</span><span class=\"k\">)</span>\n\n<span class=\"nv\">BASE_PATH</span><span class=\"o\">=</span><span class=\"s2\">&quot;</span><span class=\"nv\">$DROPBOX_PERSONAL</span><span class=\"s2\">/blog/content&quot;</span>\n<span class=\"nv\">IMAGE_PATH</span><span class=\"o\">=</span><span class=\"s2\">&quot;images&quot;</span>\n<span class=\"nv\">SEARCH_PATH</span><span class=\"o\">=</span><span class=\"s2\">&quot;</span><span class=\"nv\">$BASE_PATH</span><span class=\"s2\">/</span><span class=\"nv\">$IMAGE_PATH</span><span class=\"s2\">&quot;</span>\n\n<span class=\"nv\">LAST_ADDED</span><span class=\"o\">=</span><span class=\"k\">$(</span>mdfind <span class=\"se\">\\</span>\n    -onlyin <span class=\"s2\">&quot;</span><span class=\"nv\">$SEARCH_PATH</span><span class=\"s2\">&quot;</span> <span class=\"se\">\\</span>\n    <span class=\"s1\">&#39;kMDItemDateAdded &gt;= $time.today(-1)&#39;</span> <span class=\"se\">\\</span>\n    -attr <span class=\"s1\">&#39;kMDItemDateAdded&#39;</span> <span class=\"p\">|</span> <span class=\"se\">\\</span>\nawk -F<span class=\"s2\">&quot;kMDItemDateAdded =&quot;</span> <span class=\"s1\">&#39;{print $2 &quot;|&quot; $1}&#39;</span> <span class=\"p\">|</span>\nsort -r <span class=\"p\">|</span> <span class=\"se\">\\</span>\ncut -d<span class=\"s1\">&#39;|&#39;</span> -f2 <span class=\"p\">|</span> <span class=\"se\">\\</span>\nhead -n1 <span class=\"p\">|</span> <span class=\"se\">\\</span>\nsed -e <span class=\"s1\">&#39;s/^ *//&#39;</span> -e <span class=\"s1\">&#39;s/ *$//&#39;</span> -e <span class=\"s2\">&quot;s:</span><span class=\"nv\">$BASE_PATH</span><span class=\"s2\">::&quot;</span><span class=\"k\">)</span>\n\n<span class=\"nb\">echo</span> -n <span class=\"s2\">&quot;![]({static}</span><span class=\"nv\">$LAST_ADDED</span><span class=\"s2\">)&quot;</span>\n</code></pre></div>",
            "summary": "<p>I really enjoy writing in MultiMarkdown Composer and having Marked display a rendered version. When writing blog posts like this, images would never appear since Pelican's syntax for displaying images is <code>{static}/path/to/image</code>. I looked into Marked's preprocessor abilities and figured out a nice, clean way to display images when writing blog posts.</p>\n",
            "date_published": "2015-01-10T00:00:00-08:00",
            "author": {
                "name": "Ryan M",
                "url": "https://ryanmo.co/author/ryan-m.html"
            },
            "tags": [
                "automation",
                "python",
                "pelican"
            ]
        },
        {
            "id": "https://ryanmo.co/2014/04/06/100-happy-days",
            "url": "https://ryanmo.co/2014/04/06/100-happy-days",
            "title": "100 Happy Days",
            "content_html": "<p>A few people from work convinced me to participate in <a href=\"http://100happydays.com\">100 Happy Days</a>. Since I'm already doing a \"selfie a day\" so I figured adding one more photo a day wouldn't hurt. What I didn't want to do is post to the various social media sites every single day and spam all my followers. Hazel and my blog helped me solve this problem.</p>\n\n\n<h3 id=\"hazel\">Hazel</h3>\n<p>Similar to my <a href=\"{static}../2014-01-05/2014-01-05_Organizing-Special-Photo-with-Hazel.md\">previous post</a>, I'm using Hazel to detect special types of photos. I decided for 100 Happy Days I would always take the photos using the default Camera in square mode.</p>\n<p><img alt=\"1 Happy Day of Coffee\" src=\"https://ryanmo.co/posts/Tech/2014-04-06/3.jpg\" /></p>\n<p>Hazel makes this really simple. Each time a photo that matches the criteria comes into my Dropbox Camera Uploads folder, it gets resorted and renamed to YYYY-mm-dd.jpg.</p>\n<p><img alt=\"Hazel Rule for Photos\" src=\"https://ryanmo.co/posts/Tech/2014-04-06/hazel1.png\" /></p>\n<p>This simply takes care of the photos themselves. But now I want them to also appear on my blog. I have a separate rule that watches this new folder of photos and moves them into my Pelican project folder.</p>\n<p><img alt=\"Hazel Rule for Pelican\" src=\"https://ryanmo.co/posts/Tech/2014-04-06/hazel2.png\" /></p>\n<p>The key to this one is that I name them with sequential numbers, starting with 1.jpg. This will be useful later for my blog.</p>\n<h3 id=\"pelican-blog\">Pelican Blog</h3>\n<p>I decided to set up a hidden page on my blog to host these images. I created a custom template since it's fairly unique and different from the rest of my blog. The meat of the template is just this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">&lt;</span><span class=\"nt\">article</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">h3</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;{{ SITEURL }}/{{ page.url }}&quot;</span><span class=\"p\">&gt;</span>{{ page.title }}<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">h3</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&quot;two-columns&quot;</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;grid-container&quot;</span> <span class=\"na\">style</span><span class=\"o\">=</span><span class=\"s\">&quot;display:block;&quot;</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">ul</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;rig columns-2&quot;</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">article</span><span class=\"p\">&gt;</span>\n</code></pre></div>\n\n<p>I'm using the CSS for the gallery from <a href=\"http://alijafarian.com/responsive-image-grids-using-css/\">this</a> post by Ali Jafarian.</p>\n<p>This is where my Hazel photo naming comes in handy. I'm using a simply JavaScript function to embed these images on page load.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">function</span> <span class=\"nx\">createImages</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">start_date</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(</span><span class=\"mf\">2014</span><span class=\"p\">,</span> <span class=\"mo\">03</span><span class=\"p\">,</span> <span class=\"mo\">03</span><span class=\"p\">)</span> <span class=\"c1\">// April 3, 2014</span>\n    <span class=\"nx\">days_passed</span> <span class=\"o\">=</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">floor</span><span class=\"p\">((</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"nx\">start_date</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mf\">1000</span> <span class=\"o\">/</span> <span class=\"mf\">86400</span><span class=\"p\">);</span>\n    <span class=\"nx\">extension</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.jpg&#39;</span><span class=\"p\">;</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mf\">1</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;=</span> <span class=\"nx\">days_passed</span> <span class=\"o\">+</span> <span class=\"mf\">1</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">li</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">&#39;li&#39;</span><span class=\"p\">);</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">img</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">&#39;img&#39;</span><span class=\"p\">);</span>\n        <span class=\"nx\">img</span><span class=\"p\">.</span><span class=\"nx\">src</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/images/100daysofhappiness/&#39;</span> <span class=\"o\">+</span> <span class=\"nx\">i</span> <span class=\"o\">+</span> <span class=\"nx\">extension</span><span class=\"p\">;</span>\n        <span class=\"nx\">img</span><span class=\"p\">.</span><span class=\"nx\">setAttribute</span><span class=\"p\">(</span><span class=\"s2\">&quot;onError&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;this.onerror=null;this.src=&#39;/images/imagenotfound.jpg&#39;&quot;</span><span class=\"p\">);</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">h3</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">&#39;h3&#39;</span><span class=\"p\">);</span>\n        <span class=\"nx\">h3</span><span class=\"p\">.</span><span class=\"nx\">textContent</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Day &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">i</span><span class=\"p\">;</span>\n        <span class=\"nx\">li</span><span class=\"p\">.</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nx\">img</span><span class=\"p\">);</span>\n        <span class=\"nx\">li</span><span class=\"p\">.</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nx\">h3</span><span class=\"p\">);</span>\n        <span class=\"nx\">jQuery</span><span class=\"p\">(</span><span class=\"s1\">&#39;.rig&#39;</span><span class=\"p\">).</span><span class=\"nx\">append</span><span class=\"p\">(</span><span class=\"nx\">li</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">jQuery</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">).</span><span class=\"nx\">ready</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">createImages</span><span class=\"p\">();</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n\n<p>I can easily compute the number of days that have passed and safely assume that an image exists for each of those days. I learned today that if you add the attribute <code>onError</code> to an image, you can create a fallback image in case the real image source doesn't exist.</p>",
            "summary": "<p>A few people from work convinced me to participate in <a href=\"http://100happydays.com\">100 Happy Days</a>. Since I'm already doing a \"selfie a day\" so I figured adding one more photo a day wouldn't hurt. What I didn't want to do is post to the various social media sites every single day and spam all my followers. Hazel and my blog helped me solve this problem.</p>\n",
            "date_published": "2014-04-06T00:00:00-07:00",
            "author": {
                "name": "Ryan M",
                "url": "https://ryanmo.co/author/ryan-m.html"
            },
            "tags": [
                "hazel",
                "pelican",
                "photos"
            ]
        },
        {
            "id": "https://ryanmo.co/2013/12/29/exploring-pelican-automation",
            "url": "https://ryanmo.co/2013/12/29/exploring-pelican-automation",
            "title": "Exploring Pelican: Automation Part 1",
            "content_html": "<p>It's been a few months now since I switched from <a href=\"http://mynt.mirroredwhite.com\">Mynt</a> to <a href=\"http://blog.getpelican.com\">Pelican</a> as my static blog generator and so far I've been very happy with the switch. It's been a learning process along the way, but I've come to the point where I'm comfortable enough with it and want to start customizing and automating.</p>\n<h2 id=\"customization\">Customization</h2>\n<p>I haven't done much yet in terms of customization quite yet, but I'm adding little bits every day.  </p>\n<h3 id=\"original-files\">Original Files</h3>\n<p>I recently updated Pelican to the newest version 3.3. The part that was new to me here was that you have the option to keep the original file in your output directory.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\"># Set to True if you want to copy the articles and pages in their original format (e.g. Markdown or reStructuredText) to the specified OUTPUT_PATH.</span>\n<span class=\"n\">OUTPUT_SOURCES</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</code></pre></div>\n\n<p><strong>Update 2014-02-25:</strong> Turns out this was a bug. It's been since fixed. See the thread <a href=\"https://github.com/getpelican/pelican/pull/1183\">here</a> on github. </p>\n<p>I'm not entirely sure if it's a bug or something I was doing wrong, but I noticed that instead of creating an index.txt for every index.md file, it would create a directory called index.txt and then place the original markdown file within it. I did some poking around in the source code and found a slight issue with the <code>copy</code> function within the util.py file. It was checking if any destination existed, and if not, it would create a new directory.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">destination_</span><span class=\"p\">):</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">makedirs</span><span class=\"p\">(</span><span class=\"n\">destination_</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>I made a couple of changes to prevent this from happening. The first was that I added an additional argument to the function called <code>is_file</code> and then added this to the destination check</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">copy</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"n\">destination</span><span class=\"p\">,</span> <span class=\"n\">destination_path</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">is_file</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">destination_</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">is_file</span><span class=\"p\">:</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">makedirs</span><span class=\"p\">(</span><span class=\"n\">destination_</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>Finally, in generators.py, I added the argument where the copy function is called in <code>_create_source</code> in the <code>SourceFileGenerator</code> class.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">source_path</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"p\">,</span> <span class=\"n\">is_file</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>Now that the files are being generated correctly, I used the tip by Gabe Weatherhead over at <a href=\"http://www.macdrifter.com/tag/pelican.html\">Macdrifter</a> to add a link to the original file for every post. You can see an example of this post at the bottom of the page.</p>\n<h3 id=\"automatic-posting-to-appnet\">Automatic Posting to App.net</h3>\n<p>App.net's new Broadcast platform is pretty cool. I've subscribed to a few people already and I like the idea of having a way to broadcast each post that's made. Pelican doesn't have a great way to detect new posts, so I'm playing with my own solution by keeping track of every post and comparing.</p>\n<p>In my Fabric file, I created a function to check for new posts and then use the App.net Broadcast API to make a post</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">adn</span><span class=\"p\">():</span>\n    <span class=\"n\">current_posts</span> <span class=\"o\">=</span> <span class=\"n\">util</span><span class=\"o\">.</span><span class=\"n\">current_posts</span><span class=\"p\">()</span>\n    <span class=\"n\">post_history</span> <span class=\"o\">=</span> <span class=\"n\">pickler</span><span class=\"o\">.</span><span class=\"n\">load_old_results</span><span class=\"p\">(</span><span class=\"s1\">&#39;lib/posts.pkl&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">new_posts</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">current_posts</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">post_history</span><span class=\"p\">))</span>\n\n<span class=\"k\">if</span> <span class=\"n\">new_posts</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">post</span> <span class=\"ow\">in</span> <span class=\"n\">new_posts</span><span class=\"p\">:</span>\n        <span class=\"n\">get_adn</span> <span class=\"o\">=</span> <span class=\"n\">util</span><span class=\"o\">.</span><span class=\"n\">ADN</span><span class=\"p\">(</span><span class=\"n\">POST_PATH</span> <span class=\"o\">+</span> <span class=\"n\">post</span><span class=\"p\">)</span>\n        <span class=\"n\">get_adn</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">()</span>\n    <span class=\"n\">pickler</span><span class=\"o\">.</span><span class=\"n\">store_results</span><span class=\"p\">(</span><span class=\"s1\">&#39;lib/posts.pkl&#39;</span><span class=\"p\">,</span> <span class=\"n\">current_posts</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>I get the current posts by simply listing the contents of the posts directory and then compare to what was previously stored the last time a new post was made. I keep this is a file called lib/util.py, which explains why I have to call <code>os.path.dirname</code> twice.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">current_posts</span><span class=\"p\">():</span>\n    <span class=\"n\">post_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))),</span> <span class=\"s1\">&#39;content&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;posts&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">f</span> <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">listdir</span><span class=\"p\">(</span><span class=\"n\">post_path</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)]</span>\n</code></pre></div>\n\n<p>This seems to be the most reliable solution since it won't send broadcasts if I edit a file. Finally, when the publish function is called from my fabfile, I call <code>adn()</code>.</p>\n<h2 id=\"automation\">Automation</h2>\n<p>I'm traveling a lot these days, which means that sometimes I only have my iPad or iPhone with me. I'd still like to easily create posts without having to write up the post, log in via Prompt, commit and push. I went with a setup fairly similar to <a href=\"http://www.evanlovely.com/notes/about-this-jekyll-site/\">Evan Lovely</a> and use Hazel to watch for new posts within a directory. </p>\n<p>My Hazel workflow relies on an additional piece of metadata in my posts instead of just the file itself. This prevents any accidental posts and also lets me put whatever file I want in the folder. The file needs to pass the following script:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">markdown</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">codecs</span>\n\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">codecs</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;r&#39;</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">&#39;utf-8&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n<span class=\"n\">md</span> <span class=\"o\">=</span> <span class=\"n\">markdown</span><span class=\"o\">.</span><span class=\"n\">Markdown</span><span class=\"p\">(</span><span class=\"n\">extensions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;meta&#39;</span><span class=\"p\">])</span>\n<span class=\"n\">md</span><span class=\"o\">.</span><span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">md</span><span class=\"o\">.</span><span class=\"n\">Meta</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;hazel&#39;</span><span class=\"p\">):</span>\n    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>As long as the piece of metadata \"hazel\" exists in any of my files, Hazel  moves the file into my Pelican project folder and my publish script takes over.</p>\n<p>That's it for now! I'll keep iterating on the process and make things better.</p>",
            "summary": "<p>Pelican is a great python-based static blog generator. After a few months using it, I\u2019ve decided to automate the content generation as much as possible.</p>",
            "date_published": "2013-12-29T00:00:00-08:00",
            "author": {
                "name": "Ryan M",
                "url": "https://ryanmo.co/author/ryan-m.html"
            },
            "tags": [
                "automation",
                "pelican"
            ]
        }
    ],
    "title": "ryanmo.co",
    "version": "https://jsonfeed.org/version/1"
}