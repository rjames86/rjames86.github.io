{
    "author": {
        "name": "Ryan M"
    },
    "favicon": "https://ryanmo.co/images/favicon.png",
    "feed_url": "https://ryanmo.co/feeds/tag/python.json",
    "home_page_url": "https://ryanmo.co",
    "items": [
        {
            "id": "https://ryanmo.co/2017/05/18/json-feed-in-pelican",
            "url": "https://ryanmo.co/2017/05/18/json-feed-in-pelican",
            "title": "JSON Feed in Pelican",
            "content_html": "<p>Brent Simmons and Manton Reece recently <a href=\"https://jsonfeed.org/2017/05/17/announcing_json_feed\">announced</a> an alternative to RSS and Atom using JSON. The format is straight forward and seemed like a great fit to implement in Pelican.</p>\n<p>I've been spending a considerable amount of my time lately writing Apex code (Salesforce's proprietary language similar to Java and C#) and have come to appreciate it's ability to serialize different objects. Python isn't particularly good at this, and so I initially struggled with coming up with a clean way of implementing the generator. The new JSON feed spec has many nested objects and so representing these as separate classes made sense. Let's look at an author</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">Author</span><span class=\"p\">(</span><span class=\"n\">Object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">avatar</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">url</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">avatar</span> <span class=\"o\">=</span> <span class=\"n\">avatar</span>\n</code></pre></div>\n\n<p>This is a basic representation of an author based on JSON feed's <a href=\"https://jsonfeed.org/version/1\">spec</a>. If we were to simply try to serialize this in Python using the <code>json</code> library, we'd come across this exception</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"ne\">TypeError</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">__main__</span><span class=\"o\">.</span><span class=\"n\">Author</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x107d23e10</span><span class=\"o\">&gt;</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">JSON</span> <span class=\"n\">serializable</span>\n</code></pre></div>\n\n<p>The <code>json</code> library allows you to pass in your own custom parser, and so I created a base class for all my my objects that would contain one method that the parser would look for as a way to tell it how to serialize each class.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">JSONEncoder</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">JSONEncoder</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">default</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"s1\">&#39;as_json&#39;</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">as_json</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">JSONEncoder</span><span class=\"o\">.</span><span class=\"n\">default</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Base</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">as_json</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Author</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">avatar</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">url</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">avatar</span> <span class=\"o\">=</span> <span class=\"n\">avatar</span>\n</code></pre></div>\n\n<p>Now we can call the same method, while passing in our custom JSON encoder to serialize our class</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Author</span><span class=\"p\">(</span><span class=\"s1\">&#39;Ryan M&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"bp\">cls</span><span class=\"o\">=</span><span class=\"n\">JSONEncoder</span><span class=\"p\">)</span>\n<span class=\"c1\"># &#39;{&quot;url&quot;: null, &quot;name&quot;: &quot;Ryan M&quot;, &quot;avatar&quot;: null}&#39;</span>\n</code></pre></div>\n\n<p>Now it's just a matter of building a class for each object in the JSON feed top-level object</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">Item</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"c1\"># a list of Item classes, since there are many</span>\n<span class=\"k\">class</span> <span class=\"nc\">Items</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">):</span>\n      <span class=\"c1\"># list type doesn&#39;t have a __dict__ accessor, so we just return the list to be serialized</span>\n    <span class=\"k\">def</span> <span class=\"nf\">as_json</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n<span class=\"c1\"># The top-level JSON feed object containing all child objects</span>\n<span class=\"k\">class</span> <span class=\"nc\">JsonFeed</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div>\n\n<p>I've left out the implementation details for generating each of these objects for brevity, but the idea is all there. Each class now knows how to tell the <code>json</code> encoder how to be serialized, so it's just a matter of implementing the Pelican plugin and writing the output.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">JsonFeedGenerator</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">article_generator</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">articles</span> <span class=\"o\">=</span> <span class=\"n\">article_generator</span><span class=\"o\">.</span><span class=\"n\">articles</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"n\">article_generator</span><span class=\"o\">.</span><span class=\"n\">settings</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">article_generator</span><span class=\"o\">.</span><span class=\"n\">context</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">generator</span> <span class=\"o\">=</span> <span class=\"n\">article_generator</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;feed.json&#39;</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">site_url</span> <span class=\"o\">=</span> <span class=\"n\">article_generator</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;SITEURL&#39;</span><span class=\"p\">,</span>\n                                                      <span class=\"n\">path_to_url</span><span class=\"p\">(</span><span class=\"n\">get_relative_path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">)))</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">feed_domain</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;FEED_DOMAIN&#39;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">feed_url</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"si\">{}</span><span class=\"s1\">/</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">feed_domain</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">write_feed</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">complete_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">output_path</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">makedirs</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">complete_path</span><span class=\"p\">))</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n\n        <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">complete_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;w&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">JsonFeed</span><span class=\"o\">.</span><span class=\"n\">from_generator</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">),</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"bp\">cls</span><span class=\"o\">=</span><span class=\"n\">JSONEncoder</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_generators</span><span class=\"p\">(</span><span class=\"n\">article_generator</span><span class=\"p\">):</span>\n    <span class=\"n\">json_feed_generator</span> <span class=\"o\">=</span> <span class=\"n\">JsonFeedGenerator</span><span class=\"p\">(</span><span class=\"n\">article_generator</span><span class=\"p\">)</span>\n    <span class=\"n\">json_feed_generator</span><span class=\"o\">.</span><span class=\"n\">write_feed</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">register</span><span class=\"p\">():</span>\n    <span class=\"n\">signals</span><span class=\"o\">.</span><span class=\"n\">article_generator_finalized</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">get_generators</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>You can see the feed for this blog <a href=\"/feed.json\">here</a>. The source for the entire plugin can be found on Github <a href=\"https://github.com/rjames86/myblog/tree/master/pelican_site/plugins/json_feed\">here</a>. The plugin should work for all sites right now. I chose not to implement multiple languages into the feed since it doesn't seem like the spec supports this. Hopefully they consider this as they improve the format.</p>",
            "date_published": "2017-05-18T07:28:00-07:00",
            "author": {
                "name": "Ryan M",
                "url": "https://ryanmo.co/author/ryan-m.html"
            },
            "tags": [
                "pelican",
                "python"
            ]
        },
        {
            "id": "https://ryanmo.co/2017/05/16/create-dropbox-links-from-alfred",
            "url": "https://ryanmo.co/2017/05/16/create-dropbox-links-from-alfred",
            "title": "Create Dropbox Links from Alfred",
            "content_html": "<p>I've always treated Alfred as a Finder replacement. The speed at which I can find and take action on files is faster than Finder.app or Spotlight will ever be able to do. Because of this, I want to have a quick and easy way to share Dropbox files from within Alfred.</p>\n\n\n<p>Over the years, I've built version of a workflow that lets me share files with Dropbox. They've always been very specific to me and never reliable or secure enough to share with others. The Dropbox API has come a long ways and now gives me the ability to share this workflow without exposing my app secret.</p>\n<p><img alt=\"File Search\" src=\"https://ryanmo.co/posts/Tech/2017-05-16/file_search.png\" /></p>\n<p>This is my primary way of searching for files. I have Alfred configured so that I can hit the right arrow to take me to the actions menu.</p>\n<p><img alt=\"File Action\" src=\"https://ryanmo.co/posts/Tech/2017-05-16/file_action.png\" /></p>\n<p>You'll see that I have two actions set up. One for simply creating a link and another for creating a link that expires in a week. The latter is only possible if you have a Dropbox Pro account.</p>\n<p><img alt=\"Notification\" src=\"https://ryanmo.co/posts/Tech/2017-05-16/notification.png\" /></p>\n<p>Once you've selected one of the options, a notification will appear telling you that the link was created and the link will then be in your clipboard.</p>\n<p>You can download the workflow by clicking the Alfred icon below. Instructions for setting up the workflow can be found by clicking on the [x] in the top-right of the workflow once it's installed. Alfred doesn't do a great job making it easy to find the set-up instructions.</p>\n<h3 id=\"features\">Features</h3>\n<ul>\n<li>Supports multiple accounts if you have a personal and business account</li>\n<li>You can create any number of expiring links by creating another action and modifying the Alfred Workflow JSON <code>expires</code> key to a number of days</li>\n<li>Do to all of the different permissions that Dropbox offers for their business product, if a link already exists for the file you're trying to share with more restrictive permissions, a link won't be created. It's too difficult to expose what permissions that exist in a notification bubble. </li>\n</ul>\n<p><a href=\"https://ryanmo.co/downloads/2017-05-16/DropboxSharedLinks.alfredworkflow\"><img alt=\"image\" src=\"https://ryanmo.co/images/alfred_extension.jpg\" /></a>  </p>",
            "summary": "<p>I've always treated Alfred as a Finder replacement. The speed at which I can find and take action on files is faster than Finder.app or Spotlight will ever be able to do. Because of this, I want to have a quick and easy way to share Dropbox files from within Alfred.</p>\n",
            "date_published": "2017-05-16T07:30:00-07:00",
            "author": {
                "name": "Ryan M",
                "url": "https://ryanmo.co/author/ryan-m.html"
            },
            "tags": [
                "alfred",
                "dropbox",
                "automation",
                "python"
            ]
        },
        {
            "id": "https://ryanmo.co/2016/04/10/moving-textexpander-snippets-to-keyboard-maestro",
            "url": "https://ryanmo.co/2016/04/10/moving-textexpander-snippets-to-keyboard-maestro",
            "title": "Moving TextExpander Snippets to Keyboard Maestro",
            "content_html": "<p>I've been a long time TextExpander user. I use it every day for simple things like pasting my contact info or shortening urls using bit.ly. There are plenty of articles out there arguing for and against TextExpander's new subscription model. I support their decision but I can't justify $50 a year's worth of value and so I'm moving all of my snippets to Keyboard Maestro.</p>\n\n\n<p>I had been thinking this weekend whether it would be worth the time to try to migrate all my snippets to Keyboard Maestro. Browsing my Twitter feed, it looked as though <a href=\"http://leancrew.com/all-this/2016/04/importing-textexpander-snippets-to-keyboard-maestro/\">Dr. Drang</a> had beat me to it. Unfortunately he didn't do the work I was hoping I wouldn't have to do, and so I sat down to see how hard it would be to convert snippets to macros. Turns out...not that hard.</p>\n<p>Here are the requirements for running this script:</p>\n<ul>\n<li>Python 2.7 (I didn't test Python 3.x). If you're running an older/newer version of Python, you should be able to replace <code>python</code> with <code>/usr/bin/python2.7</code> when running the script.</li>\n<li>TextExpander 5.x. If you are running version 4, your settings will be named Settings.textexpander instead of Settings.textexpandersettings.</li>\n</ul>\n<p>I've made some decisions as to how I want the snippets to work. Notably</p>\n<ul>\n<li>Pasting instead of typing. Typing is too slow.</li>\n<li>Delete the last clipboard item, since it was the text that was just pasted. </li>\n<li>Groups remain the same. If you used groups in TextExpander, they show up as \"Snippets - <group name>\" in Keyboard Maestro. </li>\n</ul>\n<p>There are a few things that I haven't yet solved. Some I might in the future, others maybe not:</p>\n<ul>\n<li>I didn't test Applescript since I didn't have any. Please let me know if that one breaks.</li>\n<li>Placeholders and variables from TextExpander won't work. This means if you had a \"today's date\" snippet, you'll need to rewrite that one<sup id=\"fnref:1\"><a class=\"footnote-ref\" href=\"#fn:1\">1</a></sup>.</li>\n<li>Custom delimiters. I haven't really figured out if there's a way to do this. I've tried changing Keyboard Maestro to only fire on delimiters, but it doesn't seem to work. If anyone figured this out, please let me know.</li>\n</ul>\n<p>Before running, be sure to update the variable <code>TEXTEXPANDER_PATH</code> to wherever your TextExpander settings file lives. To run, it's as simple as navigating to the location where the script lives in Terminal.app and entering</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">python TE.py</span>\n</code></pre></div>\n\n<p>You'll now have a folder on your Desktop named 'TextExpander_to_KeyboardMaestro' with all of your groups.</p>\n<hr />\n<p><em>Update 2016-04-12</em></p>\n<p>Big thanks to NW in the comments for helping me debug a few things.</p>\n<p>I've removed the import of <code>enum</code>. I had forgotten that wasn't a standard library in Python 2.7. I also added a list of requirements above for running the script.</p>\n<p><em>Update 2016-04-14</em></p>\n<p>Also thanks to Dr Drang for posting about the script! I've made some updates and also put up a repo for those who would like to make edits and pull requests.</p>\n<p>Updates are</p>\n<ul>\n<li>Optional prefix if you want to change that up when moving to Keyboard Maestro</li>\n<li>Insert text by typing OR pasting</li>\n<li>Added some instruction on how to edit the variables to have the script do what you want</li>\n</ul>\n<p>The repo is now hosted at <a href=\"https://github.com/rjames86/textexpander_to_keyboardmaestro\">https://github.com/rjames86/textexpander_to_keyboardmaestro</a></p>\n<hr />\n<p>You can download the script on Github <a href=\"https://raw.githubusercontent.com/rjames86/textexpander_to_keyboardmaestro/master/TE.py\">here</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">plistlib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">glob</span>\n\n<span class=\"sd\">&#39;&#39;&#39;</span>\n<span class=\"sd\">This script will parse through all group_*.xml files within your TextExpander folder.</span>\n<span class=\"sd\">Anything marked as Plain Text, Shell Script or JavaScript should be converted into</span>\n<span class=\"sd\">Keyboard Maestro groups with the same title and abbreviation.</span>\n\n<span class=\"sd\">All new KM Macro files will be saved to the Desktop.</span>\n\n<span class=\"sd\">&#39;&#39;&#39;</span>\n\n<span class=\"c1\"># Modify this area to customize how the script will run</span>\n\n<span class=\"c1\"># Change this path to where ever your TextExander Settings live</span>\n<span class=\"n\">HOME</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">(</span><span class=\"s1\">&#39;~&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">TEXTEXPANDER_PATH</span> <span class=\"o\">=</span> <span class=\"n\">HOME</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;/Dropbox/TextExpander/Settings.textexpandersettings&#39;</span>\n<span class=\"n\">SAVE_PATH</span> <span class=\"o\">=</span> <span class=\"n\">HOME</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;/Desktop/TextExpander_to_KeyboardMaestro&#39;</span>\n\n<span class=\"c1\"># Change this if you&#39;d like to change your snippets when importing to Keyboard Maestro</span>\n<span class=\"c1\"># If your snippet is ttest, you can make it ;;ttest by changing the variable to &#39;;;&#39;</span>\n<span class=\"n\">OPTIONAL_NEW_PREFIX</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>\n\n<span class=\"c1\"># Change this if you want the snippet to inserted by typing or pasting</span>\n<span class=\"c1\"># Remember it MUST be &#39;paste&#39; or &#39;type&#39; or the script will fail</span>\n<span class=\"n\">PASTE_OR_TYPE</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;paste&#39;</span> <span class=\"c1\"># &#39;type&#39;</span>\n\n\n\n\n<span class=\"c1\">############</span>\n\n<span class=\"c1\"># Edit below at your own risk</span>\n\n<span class=\"c1\">############</span>\n\n<span class=\"n\">snippet_types</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;plaintext&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;applescript&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;shell&#39;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;javascript&#39;</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">snippet_types_to_values</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">((</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">snippet_types</span><span class=\"o\">.</span><span class=\"n\">iteritems</span><span class=\"p\">())</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">KeyboardMaestroMacros</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">macro_by_name</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">macro_name</span><span class=\"p\">,</span> <span class=\"n\">group_name</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">abbreviation</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">macro_name</span><span class=\"p\">)(</span><span class=\"n\">group_name</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">abbreviation</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">javascript</span><span class=\"p\">(</span><span class=\"n\">group_name</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">abbreviation</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;Activate&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Normal&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;CreationDate&#39;</span><span class=\"p\">:</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;IsActive&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;Macros&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"p\">{</span><span class=\"s1\">&#39;Actions&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                    <span class=\"p\">{</span><span class=\"s1\">&#39;DisplayKind&#39;</span><span class=\"p\">:</span> <span class=\"n\">KeyboardMaestroMacros</span><span class=\"o\">.</span><span class=\"n\">_paste_or_type</span><span class=\"p\">(),</span>\n                     <span class=\"s1\">&#39;IncludeStdErr&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                     <span class=\"s1\">&#39;IsActive&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                     <span class=\"s1\">&#39;IsDisclosed&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                     <span class=\"s1\">&#39;MacroActionType&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;ExecuteJavaScriptForAutomation&#39;</span><span class=\"p\">,</span>\n                     <span class=\"s1\">&#39;Path&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span>\n                     <span class=\"s1\">&#39;Text&#39;</span><span class=\"p\">:</span> <span class=\"n\">text</span><span class=\"p\">,</span>\n                     <span class=\"s1\">&#39;TimeOutAbortsMacro&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                     <span class=\"s1\">&#39;TrimResults&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                     <span class=\"s1\">&#39;TrimResultsNew&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                     <span class=\"s1\">&#39;UseText&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">},</span> <span class=\"p\">{</span>\n                        <span class=\"s1\">&#39;IsActive&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                        <span class=\"s1\">&#39;IsDisclosed&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                        <span class=\"s1\">&#39;MacroActionType&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;DeletePastClipboard&#39;</span><span class=\"p\">,</span>\n                        <span class=\"s1\">&#39;PastExpression&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;0&#39;</span><span class=\"p\">}</span>\n                    <span class=\"p\">],</span>\n                 <span class=\"s1\">&#39;CreationDate&#39;</span><span class=\"p\">:</span> <span class=\"mf\">482018934.65354</span><span class=\"p\">,</span>\n                 <span class=\"s1\">&#39;IsActive&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                 <span class=\"s1\">&#39;ModificationDate&#39;</span><span class=\"p\">:</span> <span class=\"mf\">482018953.856014</span><span class=\"p\">,</span>\n                 <span class=\"s1\">&#39;Name&#39;</span><span class=\"p\">:</span> <span class=\"n\">name</span><span class=\"p\">,</span>\n                 <span class=\"s1\">&#39;Triggers&#39;</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n                    <span class=\"s1\">&#39;Case&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Exact&#39;</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;DiacriticalsMatter&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;MacroTriggerType&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;TypedString&#39;</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;OnlyAfterWordBreak&#39;</span><span class=\"p\">:</span> <span class=\"bp\">False</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;SimulateDeletes&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;TypedString&#39;</span><span class=\"p\">:</span> <span class=\"n\">KeyboardMaestroMacros</span><span class=\"o\">.</span><span class=\"n\">_abbreviation</span><span class=\"p\">(</span><span class=\"n\">abbreviation</span><span class=\"p\">)}]}</span>\n            <span class=\"p\">],</span>\n            <span class=\"s1\">&#39;Name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Snippet - </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">group_name</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">applescript</span><span class=\"p\">(</span><span class=\"n\">group_name</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">abbreviation</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;Activate&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Normal&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;CreationDate&#39;</span><span class=\"p\">:</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;IsActive&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;Macros&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"p\">{</span><span class=\"s1\">&#39;Actions&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                    <span class=\"p\">{</span><span class=\"s1\">&#39;DisplayKind&#39;</span><span class=\"p\">:</span> <span class=\"n\">KeyboardMaestroMacros</span><span class=\"o\">.</span><span class=\"n\">_paste_or_type</span><span class=\"p\">(),</span>\n                     <span class=\"s1\">&#39;IncludeStdErr&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                     <span class=\"s1\">&#39;IsActive&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                     <span class=\"s1\">&#39;IsDisclosed&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                     <span class=\"s1\">&#39;MacroActionType&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;ExecuteAppleScript&#39;</span><span class=\"p\">,</span>\n                     <span class=\"s1\">&#39;Path&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span>\n                     <span class=\"s1\">&#39;Text&#39;</span><span class=\"p\">:</span> <span class=\"n\">text</span><span class=\"p\">,</span>\n                     <span class=\"s1\">&#39;TimeOutAbortsMacro&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                     <span class=\"s1\">&#39;TrimResults&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                     <span class=\"s1\">&#39;TrimResultsNew&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                     <span class=\"s1\">&#39;UseText&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">},</span> <span class=\"p\">{</span>\n                        <span class=\"s1\">&#39;IsActive&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                        <span class=\"s1\">&#39;IsDisclosed&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                        <span class=\"s1\">&#39;MacroActionType&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;DeletePastClipboard&#39;</span><span class=\"p\">,</span>\n                        <span class=\"s1\">&#39;PastExpression&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;0&#39;</span><span class=\"p\">}</span>\n                    <span class=\"p\">],</span>\n                 <span class=\"s1\">&#39;CreationDate&#39;</span><span class=\"p\">:</span> <span class=\"mf\">482018934.65354</span><span class=\"p\">,</span>\n                 <span class=\"s1\">&#39;IsActive&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                 <span class=\"s1\">&#39;ModificationDate&#39;</span><span class=\"p\">:</span> <span class=\"mf\">482018953.856014</span><span class=\"p\">,</span>\n                 <span class=\"s1\">&#39;Name&#39;</span><span class=\"p\">:</span> <span class=\"n\">name</span><span class=\"p\">,</span>\n                 <span class=\"s1\">&#39;Triggers&#39;</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n                    <span class=\"s1\">&#39;Case&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Exact&#39;</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;DiacriticalsMatter&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;MacroTriggerType&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;TypedString&#39;</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;OnlyAfterWordBreak&#39;</span><span class=\"p\">:</span> <span class=\"bp\">False</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;SimulateDeletes&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;TypedString&#39;</span><span class=\"p\">:</span> <span class=\"n\">KeyboardMaestroMacros</span><span class=\"o\">.</span><span class=\"n\">_abbreviation</span><span class=\"p\">(</span><span class=\"n\">abbreviation</span><span class=\"p\">)}]}</span>\n            <span class=\"p\">],</span>\n            <span class=\"s1\">&#39;Name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Snippet - </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">group_name</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">plaintext</span><span class=\"p\">(</span><span class=\"n\">group_name</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">abbreviation</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;Activate&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Normal&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;CreationDate&#39;</span><span class=\"p\">:</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;IsActive&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;Macros&#39;</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">&#39;Actions&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"p\">{</span>\n                    <span class=\"s1\">&#39;Action&#39;</span><span class=\"p\">:</span> <span class=\"n\">KeyboardMaestroMacros</span><span class=\"o\">.</span><span class=\"n\">_paste_or_type</span><span class=\"p\">(</span><span class=\"s1\">&#39;plaintext&#39;</span><span class=\"p\">),</span>\n                    <span class=\"s1\">&#39;IsActive&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;IsDisclosed&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;MacroActionType&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;InsertText&#39;</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;Paste&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;Text&#39;</span><span class=\"p\">:</span> <span class=\"n\">text</span><span class=\"p\">},</span> <span class=\"p\">{</span>\n                        <span class=\"s1\">&#39;IsActive&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                        <span class=\"s1\">&#39;IsDisclosed&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                        <span class=\"s1\">&#39;MacroActionType&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;DeletePastClipboard&#39;</span><span class=\"p\">,</span>\n                        <span class=\"s1\">&#39;PastExpression&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;0&#39;</span>\n                    <span class=\"p\">}],</span>\n                <span class=\"s1\">&#39;CreationDate&#39;</span><span class=\"p\">:</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span>\n                <span class=\"s1\">&#39;IsActive&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                <span class=\"s1\">&#39;ModificationDate&#39;</span><span class=\"p\">:</span> <span class=\"mf\">482031702.132113</span><span class=\"p\">,</span>\n                <span class=\"s1\">&#39;Name&#39;</span><span class=\"p\">:</span> <span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"s1\">&#39;Triggers&#39;</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n                    <span class=\"s1\">&#39;Case&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Exact&#39;</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;DiacriticalsMatter&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;MacroTriggerType&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;TypedString&#39;</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;OnlyAfterWordBreak&#39;</span><span class=\"p\">:</span> <span class=\"bp\">False</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;SimulateDeletes&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;TypedString&#39;</span><span class=\"p\">:</span> <span class=\"n\">KeyboardMaestroMacros</span><span class=\"o\">.</span><span class=\"n\">_abbreviation</span><span class=\"p\">(</span><span class=\"n\">abbreviation</span><span class=\"p\">)}],</span>\n            <span class=\"p\">}],</span>\n            <span class=\"s1\">&#39;Name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Snippet - </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">group_name</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">shell</span><span class=\"p\">(</span><span class=\"n\">group_name</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">abbreviation</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;Activate&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Normal&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;CreationDate&#39;</span><span class=\"p\">:</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;IsActive&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;Macros&#39;</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n                <span class=\"s1\">&#39;Actions&#39;</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n                    <span class=\"s1\">&#39;DisplayKind&#39;</span><span class=\"p\">:</span> <span class=\"n\">KeyboardMaestroMacros</span><span class=\"o\">.</span><span class=\"n\">_paste_or_type</span><span class=\"p\">(),</span>\n                    <span class=\"s1\">&#39;IncludeStdErr&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;IsActive&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;IsDisclosed&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;MacroActionType&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;ExecuteShellScript&#39;</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;Path&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;Text&#39;</span><span class=\"p\">:</span> <span class=\"n\">text</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;TimeOutAbortsMacro&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;TrimResults&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;TrimResultsNew&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;UseText&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">},</span>\n                 <span class=\"p\">{</span><span class=\"s1\">&#39;IsActive&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                  <span class=\"s1\">&#39;IsDisclosed&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                  <span class=\"s1\">&#39;MacroActionType&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;DeletePastClipboard&#39;</span><span class=\"p\">,</span>\n                  <span class=\"s1\">&#39;PastExpression&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;0&#39;</span><span class=\"p\">}],</span>\n                <span class=\"s1\">&#39;CreationDate&#39;</span><span class=\"p\">:</span> <span class=\"mf\">482018896.698121</span><span class=\"p\">,</span>\n                <span class=\"s1\">&#39;IsActive&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                <span class=\"s1\">&#39;ModificationDate&#39;</span><span class=\"p\">:</span> <span class=\"mf\">482020783.300151</span><span class=\"p\">,</span>\n                <span class=\"s1\">&#39;Name&#39;</span><span class=\"p\">:</span> <span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"s1\">&#39;Triggers&#39;</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n                    <span class=\"s1\">&#39;Case&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Exact&#39;</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;DiacriticalsMatter&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;MacroTriggerType&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;TypedString&#39;</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;OnlyAfterWordBreak&#39;</span><span class=\"p\">:</span> <span class=\"bp\">False</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;SimulateDeletes&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;TypedString&#39;</span><span class=\"p\">:</span> <span class=\"n\">KeyboardMaestroMacros</span><span class=\"o\">.</span><span class=\"n\">_abbreviation</span><span class=\"p\">(</span><span class=\"n\">abbreviation</span><span class=\"p\">)}],</span>\n                <span class=\"p\">}],</span>\n            <span class=\"s1\">&#39;Name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Snippet - </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">group_name</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_abbreviation</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">OPTIONAL_NEW_PREFIX</span> <span class=\"o\">+</span> <span class=\"n\">name</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_paste_or_type</span><span class=\"p\">(</span><span class=\"n\">snippet_type</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;paste&#39;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Pasting&quot;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;type&#39;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Typing&quot;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">if</span> <span class=\"n\">snippet_type</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;plaintext&#39;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;By</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"n\">PASTE_OR_TYPE</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"n\">PASTE_OR_TYPE</span><span class=\"p\">]</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">parse_textexpander</span><span class=\"p\">():</span>\n    <span class=\"sd\">&#39;&#39;&#39;</span>\n<span class=\"sd\">    Each TextExpander group is its own file starting with the file name &#39;group_&#39;.</span>\n\n<span class=\"sd\">    Example snippet dictionary</span>\n<span class=\"sd\">    {</span>\n<span class=\"sd\">        &#39;abbreviation&#39;: &#39;.bimg&#39;,</span>\n<span class=\"sd\">        &#39;abbreviationMode&#39;: 0,</span>\n<span class=\"sd\">        &#39;creationDate&#39;: datetime.datetime(2013, 5, 19, 19, 42, 16),</span>\n<span class=\"sd\">        &#39;label&#39;: &#39;&#39;,</span>\n<span class=\"sd\">        &#39;modificationDate&#39;: datetime.datetime(2015, 1, 10, 20, 19, 59),</span>\n<span class=\"sd\">        &#39;plainText&#39;: &#39;some text,</span>\n<span class=\"sd\">        &#39;snippetType&#39;: 3,</span>\n<span class=\"sd\">        &#39;uuidString&#39;: &#39;100F8D1F-A2D1-4313-8B55-EFD504AE7894&#39;</span>\n<span class=\"sd\">    }</span>\n\n<span class=\"sd\">    Return a list of dictionaries where the keys are the name of the group</span>\n<span class=\"sd\">    &#39;&#39;&#39;</span>\n    <span class=\"n\">to_ret</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"c1\"># Let&#39;s get all the xml group files in the directory</span>\n    <span class=\"n\">xml_files</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">f</span> <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">glob</span><span class=\"o\">.</span><span class=\"n\">glob</span><span class=\"p\">(</span><span class=\"n\">TEXTEXPANDER_PATH</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/*.xml&quot;</span><span class=\"p\">)</span>\n                 <span class=\"k\">if</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"n\">TEXTEXPANDER_PATH</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/group_&quot;</span><span class=\"p\">)]</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">xml_file</span> <span class=\"ow\">in</span> <span class=\"n\">xml_files</span><span class=\"p\">:</span>\n        <span class=\"n\">pl</span> <span class=\"o\">=</span> <span class=\"n\">plistlib</span><span class=\"o\">.</span><span class=\"n\">readPlist</span><span class=\"p\">(</span><span class=\"n\">xml_file</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">pl</span><span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">]</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">to_ret</span><span class=\"p\">:</span>\n            <span class=\"n\">to_ret</span><span class=\"p\">[</span><span class=\"n\">pl</span><span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">snippet</span> <span class=\"ow\">in</span> <span class=\"n\">pl</span><span class=\"p\">[</span><span class=\"s1\">&#39;snippetPlists&#39;</span><span class=\"p\">]:</span>\n            <span class=\"k\">if</span> <span class=\"n\">snippet</span><span class=\"p\">[</span><span class=\"s1\">&#39;snippetType&#39;</span><span class=\"p\">]</span> <span class=\"ow\">in</span> <span class=\"n\">snippet_types</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">():</span>\n                <span class=\"n\">to_ret</span><span class=\"p\">[</span><span class=\"n\">pl</span><span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">]]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">snippet</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">to_ret</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">text_expanders</span> <span class=\"o\">=</span> <span class=\"n\">parse_textexpander</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">group</span><span class=\"p\">,</span> <span class=\"n\">text_expander</span> <span class=\"ow\">in</span> <span class=\"n\">text_expanders</span><span class=\"o\">.</span><span class=\"n\">iteritems</span><span class=\"p\">():</span>\n        <span class=\"n\">macros_to_create</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">snippet</span> <span class=\"ow\">in</span> <span class=\"n\">text_expander</span><span class=\"p\">:</span>\n            <span class=\"n\">macros_to_create</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n                <span class=\"n\">KeyboardMaestroMacros</span><span class=\"o\">.</span><span class=\"n\">macro_by_name</span><span class=\"p\">(</span><span class=\"n\">snippet_types_to_values</span><span class=\"p\">[</span><span class=\"n\">snippet</span><span class=\"p\">[</span><span class=\"s1\">&#39;snippetType&#39;</span><span class=\"p\">]],</span>\n                                                    <span class=\"n\">group</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">snippet</span><span class=\"p\">[</span><span class=\"s1\">&#39;label&#39;</span><span class=\"p\">],</span>\n                                                    <span class=\"n\">snippet</span><span class=\"p\">[</span><span class=\"s1\">&#39;plainText&#39;</span><span class=\"p\">],</span>\n                                                    <span class=\"n\">snippet</span><span class=\"p\">[</span><span class=\"s1\">&#39;abbreviation&#39;</span><span class=\"p\">])</span>\n                <span class=\"p\">)</span>\n\n        <span class=\"c1\"># Create a new folder on the desktop to put the macros</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">SAVE_PATH</span><span class=\"p\">):</span>\n            <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">mkdir</span><span class=\"p\">(</span><span class=\"n\">SAVE_PATH</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Save the macros</span>\n        <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">SAVE_PATH</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;/</span><span class=\"si\">%s</span><span class=\"s1\">.kmmacros&#39;</span> <span class=\"o\">%</span> <span class=\"n\">group</span><span class=\"p\">,</span> <span class=\"s1\">&#39;w&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">plistlib</span><span class=\"o\">.</span><span class=\"n\">writePlistToString</span><span class=\"p\">(</span><span class=\"n\">macros_to_create</span><span class=\"p\">))</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<p>Feedback and pull requests welcome. I'll continue to update the script and this post if I make any substantial iterations.</p>\n<div class=\"footnote\">\n<hr />\n<ol>\n<li id=\"fn:1\">\n<p>Hint. If you had your date look like 2016-04-10, the Keyboard Maestro equivalent is <code>%ICUDateTime%yyyy-MM-dd%</code>&#160;<a class=\"footnote-backref\" href=\"#fnref:1\" title=\"Jump back to footnote 1 in the text\">&#8617;</a></p>\n</li>\n</ol>\n</div>",
            "summary": "<p>I've been a long time TextExpander user. I use it every day for simple things like pasting my contact info or shortening urls using bit.ly. There are plenty of articles out there arguing for and against TextExpander's new subscription model. I support their decision but I can't justify $50 a year's worth of value and so I'm moving all of my snippets to Keyboard Maestro.</p>\n",
            "date_published": "2016-04-10T17:26:00-07:00",
            "author": {
                "name": "Ryan M",
                "url": "https://ryanmo.co/author/ryan-m.html"
            },
            "tags": [
                "automation",
                "textexpander",
                "python",
                "keyboardmaestro"
            ]
        },
        {
            "id": "https://ryanmo.co/2015/09/14/adding-critical-css-in-pelican",
            "url": "https://ryanmo.co/2015/09/14/adding-critical-css-in-pelican",
            "title": "Adding Critical CSS in Pelican",
            "content_html": "<p>As it turns out, adding <a href=\"http://www.smashingmagazine.com/2015/08/understanding-critical-css/\">critical css</a> wasn't trivial, but didn't take as much effort as I had originally thought. My site's layout doesn't contain <em>that</em> much styling, and so I simply added all of my CSS as an inline <code>style</code> tag. The tricky part, was getting Jinja to play nicely.</p>\n<p>The first step was to generate a separate css file that only contained what was needed when you first load and see the page. I use Less as my pre-processor, and created a very small Less file that looked like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">@</span><span class=\"k\">import</span> <span class=\"o\">(</span><span class=\"nt\">inline</span><span class=\"o\">)</span> <span class=\"s1\">&#39;../tipuesearch/tipuesearch.css&#39;</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"k\">import</span> <span class=\"s1\">&#39;default_mobile.less&#39;</span><span class=\"p\">;</span>\n<span class=\"p\">@</span><span class=\"k\">import</span> <span class=\"s1\">&#39;largescreens.less&#39;</span><span class=\"p\">;</span>\n</code></pre></div>\n\n<p>Once compiled and minimized<sup id=\"fnref:1\"><a class=\"footnote-ref\" href=\"#fn:1\">1</a></sup>, I needed to add it to my <code>base.html</code> template.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"x\">&lt;style type=&quot;text/css&quot;&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">include</span> <span class=\"s1\">&#39;critical.css&#39;</span> <span class=\"cp\">%}</span><span class=\"x\"></span>\n<span class=\"x\">&lt;/style&gt;</span>\n</code></pre></div>\n\n<p>Here is where the problem when generating my site.</p>\n<div class=\"codehilite\"><pre><span></span><code>WARNING: Caught exception <span class=\"s2\">&quot;TemplateSyntaxError: Missing end of comment tag&quot;</span>. Reloading.\n</code></pre></div>\n\n<p>Since my minimized CSS contained <code>'{#'</code>, Jinja was interpreting this as a comment and raised an exception. While this is an easy fix by changing the Jinja environment variables within Pelican's generators.py, I didn't want to go this route since I would need to update this<sup id=\"fnref:2\"><a class=\"footnote-ref\" href=\"#fn:2\">2</a></sup> every time there was an update to Pelican. Instead, I wrote a Jinja extension which Pelican supports natively. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\"># in pelicanconf.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">jinja2.ext</span> <span class=\"kn\">import</span> <span class=\"n\">Extension</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomCommentStrings</span><span class=\"p\">(</span><span class=\"n\">Extension</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">environment</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">CustomCommentStrings</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">environment</span><span class=\"p\">)</span>\n\n        <span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">comment_start_string</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;###&#39;</span>\n        <span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">comment_end_string</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/###&#39;</span>\n\n<span class=\"n\">JINJA_EXTENSIONS</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">CustomCommentStrings</span><span class=\"p\">]</span>\n</code></pre></div>\n\n<hr />\n<p><em>Update 2017-01-05</em></p>\n<p>If you're using Pelican version 3.7+, you don't have to write the custom extension shown above, you can simply update the <code>JINJA_ENVIRONMENT</code> settings variable:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">JINJA_ENVIRONMENT</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;comment_start_string&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;###&#39;</span><span class=\"p\">,</span> \n    <span class=\"s1\">&#39;comment_end_string&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;/###&#39;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n<hr />\n<p>One thing to note here is that if you are using <code>{# ... #}</code> as comment strings in Jinja, you'll need to update them to whatever new start and end strings you define.</p>\n<p>And success! The <code>critical.css</code> file was successfully imported and I now my critical CSS is included on page load. With this, Google now gives me a 100/100 speed score for mobile and 98/100 on desktop.</p>\n<div class=\"footnote\">\n<hr />\n<ol>\n<li id=\"fn:1\">\n<p>Google suggests that you minimize critical css to reduce your file size.&#160;<a class=\"footnote-backref\" href=\"#fnref:1\" title=\"Jump back to footnote 1 in the text\">&#8617;</a></p>\n</li>\n<li id=\"fn:2\">\n<p>I plan on submitting a pull-request to allow manually setting Jinja environment variables.&#160;<a class=\"footnote-backref\" href=\"#fnref:2\" title=\"Jump back to footnote 2 in the text\">&#8617;</a></p>\n</li>\n</ol>\n</div>",
            "date_published": "2015-09-14T07:41:00-07:00",
            "date_modified": "2017-01-05T20:45:00-08:00",
            "author": {
                "name": "Ryan M",
                "url": "https://ryanmo.co/author/ryan-m.html"
            },
            "tags": [
                "pelican",
                "automation",
                "python"
            ]
        },
        {
            "id": "https://ryanmo.co/2015/04/05/download-paychecks-from-adp-with-python",
            "url": "https://ryanmo.co/2015/04/05/download-paychecks-from-adp-with-python",
            "title": "Download Paychecks from ADP with Python",
            "content_html": "<p>If your employer uses ADP, you'll know how terrible their website is.  I always dread having to go to the website, but I like to download my paychecks every two weeks. </p>\n\n<p>I started playing around with writing a script to download them using Python, but decided I should check Github to see if anyone had already done this. Sure enough, the <a href=\"https://github.com/rayhe/adp\">first result</a> was a script that someone had written that would download all your paychecks. </p>\n<p>The script worked perfectly, but there were a few small changes I wanted to make. First, I added a new method that let me easily set the destination path.  I also didn't want to have to remember to run this every two weeks, nor did I want a cron job running this script with my password in plain text. I forked the repo, and started incorporating OS X's Keychain to let me store my password securely and running the script once a day to pull down any new paychecks. I borrowed the Keychain library from the <a href=\"https://github.com/deanishe/alfred-workflow\">alfred-workflow</a>. This lets me easily save and retrieve passwords from Keychain in python. To set my for ADP in Keychain, I used the quick script (you could also do this manually in Keychain.app):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">keychain</span> <span class=\"kn\">import</span> <span class=\"n\">KeyChain</span>\n<span class=\"kn\">import</span> <span class=\"nn\">getpass</span>\n\n<span class=\"n\">my_password</span> <span class=\"o\">=</span> <span class=\"n\">getpass</span><span class=\"o\">.</span><span class=\"n\">getpass</span><span class=\"p\">(</span><span class=\"s2\">&quot;Enter pw: &quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">KeyChain</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">save_password</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_username&quot;</span><span class=\"p\">,</span> <span class=\"n\">my_password</span><span class=\"p\">,</span> <span class=\"s1\">&#39;adp&#39;</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>The script is smart enough to not re-download paychecks that you've already saved, so now it was as simple as adding a new line to my daily cron jobs</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">python</span> <span class=\"n\">adp</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"s2\">&quot;my_username&quot;</span>\n</code></pre></div>\n\n<p>Lastly, just so that I know when a new paycheck has been added, I set up a small Hazel rule to send me a notification through Pushover whenever a new file is added</p>\n<p><img alt=\"adp_hazel\" src=\"https://ryanmo.co/posts/Tech/2015-04-05/adp_hazel.png\" /></p>\n<p>You can see my fork of ADP-paychecks <a href=\"https://github.com/rjames86/adp/tree/keychain\">here</a>. You can download a zip of the project <a href=\"https://github.com/rjames86/adp/archive/keychain.zip\">here</a>.</p>",
            "summary": "<p>If your employer uses ADP, you'll know how terrible their website is.  I always dread having to go to the website, but I like to download my paychecks every two weeks. </p>\n",
            "date_published": "2015-04-05T03:44:00-07:00",
            "author": {
                "name": "Ryan M",
                "url": "https://ryanmo.co/author/ryan-m.html"
            },
            "tags": [
                "python",
                "automation"
            ]
        },
        {
            "id": "https://ryanmo.co/2015/01/10/view-image-links-from-pelican-in-marked-2",
            "url": "https://ryanmo.co/2015/01/10/view-image-links-from-pelican-in-marked-2",
            "title": "View Image Links from Pelican in Marked 2",
            "content_html": "<p>I really enjoy writing in MultiMarkdown Composer and having Marked display a rendered version. When writing blog posts like this, images would never appear since Pelican's syntax for displaying images is <code>{static}/path/to/image</code>. I looked into Marked's preprocessor abilities and figured out a nice, clean way to display images when writing blog posts.</p>\n\n<p>In Marked's preferences under Advanced, there is an option to add your own preprocessor. This gives you the ability to format the text in the file before Marked renders the markdown.</p>\n<p><img alt=\"marked_preferences\" src=\"https://ryanmo.co/posts/Tech/2015-01-10/marked_preferences.png\" /></p>\n<p>The script simply looks for any occurrence of the <code>{static}</code> and replaces it with the path to my content folder in Pelican.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"ch\">#!/usr/bin/python</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"n\">home</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">(</span><span class=\"s1\">&#39;~&#39;</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PelicanFormat</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">blog_path</span> <span class=\"o\">=</span> <span class=\"n\">home</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;/Dropbox/blog/content&#39;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdin</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__str__</span><span class=\"p\">())</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">content</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">replace_filenames</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">&#39;</span><span class=\"si\">{static}</span><span class=\"s1\">&#39;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">blog_path</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">change_codeblocks</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        TODO Pelican uses &#39;:::language&#39; to override syntax highlighting.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">PelicanFormat</span><span class=\"p\">()</span>\n    <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">replace_filenames</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span> <span class=\"n\">p</span>\n</code></pre></div>\n\n<p>Now I can preview images for my blog posts instead of broken images.</p>\n<hr />\n<p><em>Bonus!</em></p>\n<p>This is a Text Expander snippet I use to create image urls for Pelican. It looks for the last file that was added to my images folder and then creates the url</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"ch\">#!/bin/bash</span>\n\n<span class=\"nv\">DROPBOX_PERSONAL</span><span class=\"o\">=</span><span class=\"k\">$(</span>python -c <span class=\"s2\">&quot;import json;f=open(&#39;</span><span class=\"nv\">$HOME</span><span class=\"s2\">/.dropbox/info.json&#39;, &#39;r&#39;).read();data=json.loads(f);print data.get(&#39;personal&#39;, {}).get(&#39;path&#39;, &#39;&#39;)&quot;</span><span class=\"k\">)</span>\n\n<span class=\"nv\">BASE_PATH</span><span class=\"o\">=</span><span class=\"s2\">&quot;</span><span class=\"nv\">$DROPBOX_PERSONAL</span><span class=\"s2\">/blog/content&quot;</span>\n<span class=\"nv\">IMAGE_PATH</span><span class=\"o\">=</span><span class=\"s2\">&quot;images&quot;</span>\n<span class=\"nv\">SEARCH_PATH</span><span class=\"o\">=</span><span class=\"s2\">&quot;</span><span class=\"nv\">$BASE_PATH</span><span class=\"s2\">/</span><span class=\"nv\">$IMAGE_PATH</span><span class=\"s2\">&quot;</span>\n\n<span class=\"nv\">LAST_ADDED</span><span class=\"o\">=</span><span class=\"k\">$(</span>mdfind <span class=\"se\">\\</span>\n    -onlyin <span class=\"s2\">&quot;</span><span class=\"nv\">$SEARCH_PATH</span><span class=\"s2\">&quot;</span> <span class=\"se\">\\</span>\n    <span class=\"s1\">&#39;kMDItemDateAdded &gt;= $time.today(-1)&#39;</span> <span class=\"se\">\\</span>\n    -attr <span class=\"s1\">&#39;kMDItemDateAdded&#39;</span> <span class=\"p\">|</span> <span class=\"se\">\\</span>\nawk -F<span class=\"s2\">&quot;kMDItemDateAdded =&quot;</span> <span class=\"s1\">&#39;{print $2 &quot;|&quot; $1}&#39;</span> <span class=\"p\">|</span>\nsort -r <span class=\"p\">|</span> <span class=\"se\">\\</span>\ncut -d<span class=\"s1\">&#39;|&#39;</span> -f2 <span class=\"p\">|</span> <span class=\"se\">\\</span>\nhead -n1 <span class=\"p\">|</span> <span class=\"se\">\\</span>\nsed -e <span class=\"s1\">&#39;s/^ *//&#39;</span> -e <span class=\"s1\">&#39;s/ *$//&#39;</span> -e <span class=\"s2\">&quot;s:</span><span class=\"nv\">$BASE_PATH</span><span class=\"s2\">::&quot;</span><span class=\"k\">)</span>\n\n<span class=\"nb\">echo</span> -n <span class=\"s2\">&quot;![]({static}</span><span class=\"nv\">$LAST_ADDED</span><span class=\"s2\">)&quot;</span>\n</code></pre></div>",
            "summary": "<p>I really enjoy writing in MultiMarkdown Composer and having Marked display a rendered version. When writing blog posts like this, images would never appear since Pelican's syntax for displaying images is <code>{static}/path/to/image</code>. I looked into Marked's preprocessor abilities and figured out a nice, clean way to display images when writing blog posts.</p>\n",
            "date_published": "2015-01-10T00:00:00-08:00",
            "author": {
                "name": "Ryan M",
                "url": "https://ryanmo.co/author/ryan-m.html"
            },
            "tags": [
                "automation",
                "python",
                "pelican"
            ]
        },
        {
            "id": "https://ryanmo.co/2014/12/23/pinboard-downloader",
            "url": "https://ryanmo.co/2014/12/23/pinboard-downloader",
            "title": "Download Pinboard Bookmarks with OS X Tags",
            "content_html": "<p>For the last few years, I've been using Brett Terpstra's <a href=\"http://brettterpstra.com/2011/04/02/mirror-your-pinboard-bookmarks-with-openmeta-tags/\">Pinboard to Openmeta</a> to save my Pinboard bookmarks locally. In the last few months, I've been spending more and more time trying to fix issues to get it to run reliably. Since this is something that I use often, I figured it was worth just re-writing it myself.</p>\n\n<p>The script is a slightly simpler version of the original, but the core functionality is the same. Each bookmark is saved as a webloc file and apply any OS X tags to the file. This can be paired with an <a href=\"https://ryanmo.co/downloads/pinboard-downloader/Bookmarks.alfredworkflow\">Alfred workflow</a> to easily search by title or tag.</p>\n<p>You can download the download-pinboard project <a href=\"https://github.com/rjames86/download_pinboard/archive/master.zip\">here</a>. Feel free to check out the Github project <a href=\"https://github.com/rjames86/download_pinboard\">here</a>.</p>\n<h3 id=\"setup\">Setup</h3>\n<p>Create a settings file</p>\n<div class=\"codehilite\"><pre><span></span><code>cp settings.py<span class=\"o\">{</span>.example,<span class=\"o\">}</span>\n</code></pre></div>\n\n<p>with the following information</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">_PINBOARD_TOKEN</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;YOUR TOKEN HERE&#39;</span>\n<span class=\"n\">_SAVE_PATH</span> <span class=\"o\">=</span> <span class=\"n\">HOME</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;/Bookmarks/&#39;</span>\n</code></pre></div>\n\n<p>In settings.py set your Pinboard token and the path where you want your bookmarks to be saved. Your token can be found at <a href=\"https://pinboard.in/settings/password\">https://pinboard.in/settings/password</a>. The path must exist where you save your bookmarks and must end with a trailing /.</p>\n<h3 id=\"running-the-script\">Running the Script</h3>\n<p>To start the script, you can simply do</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">python main.py</span>\n</code></pre></div>\n\n<h4 id=\"optional-arguments\">Optional arguments</h4>\n<p><code>-v, --verbose</code> Shows output as stdout<br />\n<code>-t</code> Filters the bookmarks you want to download by tag. You can pass multiple -t tags, but no more than 3. Multiple tags are AND not OR<br />\n<code>--reset [optional num of days]</code> Resets your last updated time. If you don't specifiy a number, it will reset to 999 days.<br />\n<code>--skip-update</code> Lets you bypass the last downloaded time. Nice for redownloading everything.  </p>\n<h3 id=\"notes-and-todo\">Notes and Todo</h3>\n<p>I have a very small number of bookmarks (~150) and so I don't know if there will be any issues with a really large library. If you have one, and run into problems, please let me know and I'll happily look into it.</p>\n<hr />",
            "summary": "<p>For the last few years, I've been using Brett Terpstra's <a href=\"http://brettterpstra.com/2011/04/02/mirror-your-pinboard-bookmarks-with-openmeta-tags/\">Pinboard to Openmeta</a> to save my Pinboard bookmarks locally. In the last few months, I've been spending more and more time trying to fix issues to get it to run reliably. Since this is something that I use often, I figured it was worth just re-writing it myself.</p>\n",
            "date_published": "2014-12-23T00:00:00-08:00",
            "author": {
                "name": "Ryan M",
                "url": "https://ryanmo.co/author/ryan-m.html"
            },
            "tags": [
                "automation",
                "python",
                "projects"
            ]
        },
        {
            "id": "https://ryanmo.co/2014/03/01/digitizing-the-family-photos",
            "url": "https://ryanmo.co/2014/03/01/digitizing-the-family-photos",
            "title": "Digitizing the Family Photos",
            "content_html": "<p>I had this ongoing fear that all of our family photos would get lost or destroyed. I've always wanted to have a central place for all of my photos, both past and present. In early 2012, my mom and I started on a project to scan, crop and organize all of our old photos from negatives.</p>\n\n\n<h1 id=\"going-digital\">Going Digital</h1>\n<p>I was fortunate that when I decided to take on this project, my mom already had two large Epson flatbed scanners with transparency adapters. What was even better was that my mom was highly organized over the years and archived all of the negatives of every photo she had ever taken. This only left us with one thing to do: scan the photos.  Since I was living in California and my mom in Montana, the work of pulling the negatives and scanning them was going to be done by my mom. We also needed to have a way to transfer the files from her computer to mine. Dropbox was an obvious choice in this case, but there was one problem that would complicate everything: hard drive space. </p>\n<p>My mom was still using her PowerMac G5 at the time and hard drive space was pretty limited. It wouldn't have taken long before she wouldn't have enough space to even scan the photos. As a simple solution, once the scans were uploaded and synced to my computer, I could have manually removed the files and place them on my own computer, but I was lazy and didn't want to check constantly whether new files had been added. At the time, I was just learning how to code and thought this would be good practice <sup id=\"fnref:1\"><a class=\"footnote-ref\" href=\"#fn:1\">1</a></sup>. I ended up writing a script that would mirror the folder structure for the scans in our Dropbox shared folder on my local Desktop and then remove the original file in Dropbox. The old folder structure was maintained so that if any new files were added to the same folder, my mom wouldn't have to recreate them. I then set this up as a cron job to run once a day and then send me an email digest of all the files that were transferred.</p>\n<p>After a couple of weeks, I had nearly 15 years of photos in folders organized by year totaling around 85GB. Each Photoshop file was around 1.GB each and the photos were scanned at 300dpi. Now the hardest and longest part of the project was about to begin.</p>\n<p><img alt=\"Folder Structure\" src=\"https://ryanmo.co/2014/03/01/digitizing-the-family-photos/folders.png\" /></p>\n<h1 id=\"cropping-resizing-and-renaming\">Cropping, Resizing, and Renaming</h1>\n<p>I wasn't entirely sure how I was going to do this part efficiently. My mom hadn't laid out the photos in a symmetric grid and there wasn't a reliable way to detect photo borders. I also decided beforehand that I wanted to preserve the original files and so I would save an individual Photoshop file for each photo that was cropped. I then wanted to have a separate folder that was simply for viewing the files.</p>\n<p>Starting off, I wanted to try manually doing everything and automate things over time. Cropping the files using the marquee tool was always going to be manual. I would select the file, copy it, create a new file with the dimensions from the clipboard and then paste the photo into the new file. After I had gone through the entire file, I would save all the files at once with random names (you'll see later why the naming here didn't matter). This part immediately became tedious. I did some research on how I could make this easier or faster and discovered Photoshop actions<sup id=\"fnref:2\"><a class=\"footnote-ref\" href=\"#fn:2\">2</a></sup>. What was great about this was I was able to record every step I was taking into one single keyboard shortcut. This broke down the process to simply selecting the photo and hitting shift-F1. This one keyboard shortcut took care of copying the file, creating a new file with the dimensions of the clipboard, pasting and then finally selecting the previous file. That last step was key. Instead of a final control-tab to move back to the original file, the action took care of it for me. You can download the Photoshop action <a href=\"https://ryanmo.co/2014/03/01/digitizing-the-family-photos/Scans.atn\">here</a>.</p>\n<p><img alt=\"Actions Screenshot\" src=\"https://ryanmo.co/2014/03/01/digitizing-the-family-photos/actions_screenshot.png\" /></p>\n<p>At this point, I had an original Photoshop file and a folder called Cropped where all the new photos lived. I now needed a way to rename these files to something meaningful. Automator and Alfred made this simple. After I finished cropping, I would select all of the newly created files, run my Alfred extension \"Rename Scans\" which would trigger an automator script, prompt me to name the files, and then each file would be renamed from something like Untitled1.psd to November 1987_1.psd.</p>\n<p>At this point, the final step for each of these files was to create a viewable JPG for every photo. Turns out, Photoshop has a great feature called Image Processor. After the files were neatly renamed, I would open up the Image Processor, select the folder, and hit go. My settings were always saved so there wasn't much else to be done each time I ran this. I would take the Photoshop files, create a new JPG at 5 quality in a new folder called Low Res Images with the same naming convention. </p>\n<p><img alt=\"Image Processor\" src=\"https://ryanmo.co/2014/03/01/digitizing-the-family-photos/image_processor.png\" /></p>\n<p>I was then able to share this folder back with my mom and the rest of my family. They enjoyed watching the photos get added over the last year or so as I casually worked on the files.</p>\n<p>Once I had done all of the steps for each file, I would move the folder of PSD files into a folder called Done. This simply gave me a better idea of how many folders I had left to work on.</p>\n<h1 id=\"viewing\">Viewing</h1>\n<p>In late January 2014, I finally finished cropping all of the photos. I never intended on it taking quite this long, but it was never something that needed to have a deadline. It felt great to know that I was finally done and could just sit back and look at all of the old photos from what I was little. I was using <a href=\"http://www.lynapp.com\">Lyn</a> to view all the photos and realized that something was a little off. All of the photos were out of order. All of the folders had been named as Month Year, and even if I was viewing all of the photos at the same time, they were sorted in the order that I had created the files, not the time they were actually taken. I couldn't sort them in a photo viewer, Dropbox's photo tab would sort them by file creation and not EXIF date taken, and using Spotlight search was more-or-less pointless. There was no way  that I was going to manually date 3,300 photos by hand. I had used the command line tool <a href=\"http://www.sno.phy.queensu.ca/~phil/exiftool/\">exiftools</a> a few times, and I started looking into whether this would be a possibility for dating the files. It turned out that the command was really straightforward for naming a folder</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">exiftool</span> <span class=\"s2\">&quot;-AllDates=1999:12:31 12:00:00&quot;</span> <span class=\"n\">foldername</span><span class=\"o\">/</span>\n</code></pre></div>\n\n<p>Even though I could have done it by hand, I didn't really want to have to type this in for 80 or so folders of photos. I quickly wrote up a Python script that would parse out the date from the folder names and prompt me to confirm whether this was correct or not. I was fine hitting Enter 80 times. </p>\n<p>Some of the folders were called things like January-March 1995. For these cases, I would just assume the first month for the date. I wasn't going for perfection, but rather a good estimate for the time the photos were taken.</p>\n<p>You can take a look at the script <a href=\"https://ryanmo.co/2014/03/01/digitizing-the-family-photos/convert_exif_dates.py\">here</a>. Do note that the script is really specific to my folder structure so it might not work perfectly for you, but it'll be a good start if you need to do something like this.</p>\n<p><img alt=\"Lyn App\" src=\"https://ryanmo.co/2014/03/01/digitizing-the-family-photos/lynapp.png\" /></p>\n<h1 id=\"what-i-learned\">What I Learned</h1>\n<p>Epson now makes a <a href=\"http://www.epson.com/cgi-bin/Store/jsp/Product.do?BV_UseBVCookie=yes&amp;sku=B11B178061\">scanner</a> that eliminates a lot of the hard work around cropping the photos. It's expensive, but it would have saved me a lot of work.</p>\n<p>I've made this comment before, but I still would love to have a way to embed facial recognition into the metadata of photos. My perfect world would be having the ability to do something like search for all of the photos of my brother before 1995.</p>\n<p>Ultimately, this was a long, but satisfying project. I sleep better at night knowing that all of our family photos are backed up and not be lost forever if there were ever to be a disaster.</p>\n<div class=\"footnote\">\n<hr />\n<ol>\n<li id=\"fn:1\">\n<p>For those who want to see the script, <a href=\"https://ryanmo.co/2014/03/01/digitizing-the-family-photos/movescans.py\">here</a> it is. Please don't judge me. This was actually one of my first real scripts I had ever written. I know there are better ways to do a lot of it.&#160;<a class=\"footnote-backref\" href=\"#fnref:1\" title=\"Jump back to footnote 1 in the text\">&#8617;</a></p>\n</li>\n<li id=\"fn:2\">\n<p>I'm a total Photoshop newb&#160;<a class=\"footnote-backref\" href=\"#fnref:2\" title=\"Jump back to footnote 2 in the text\">&#8617;</a></p>\n</li>\n</ol>\n</div>",
            "summary": "<p>I had this ongoing fear that all of our family photos would get lost or destroyed. I've always wanted to have a central place for all of my photos, both past and present. In early 2012, my mom and I started on a project to scan, crop and organize all of our old photos from negatives.</p>\n",
            "date_published": "2014-03-01T00:00:00-08:00",
            "author": {
                "name": "Ryan M",
                "url": "https://ryanmo.co/author/ryan-m.html"
            },
            "tags": [
                "python",
                "alfred",
                "hazel",
                "dropbox",
                "bash",
                "photos"
            ]
        }
    ],
    "title": "ryanmo.co",
    "version": "https://jsonfeed.org/version/1"
}