{
    "author": {
        "name": "Ryan M"
    },
    "favicon": "https://ryanmo.co/images/favicon.png",
    "feed_url": "https://ryanmo.co/feeds/tag/photos.json",
    "home_page_url": "https://ryanmo.co",
    "items": [
        {
            "id": "https://ryanmo.co/2014/09/28/exiftool-cheatsheet",
            "url": "https://ryanmo.co/2014/09/28/exiftool-cheatsheet",
            "title": "My Exiftool Cheatsheet",
            "content_html": "<p>I've spent a lot of time organizing and <a href=\"{static}../2014-03-01/2014-03-01%20Digitizing%20the%20Family%20Photos.md\">digitizing</a> old photos. Exiftool has been a great tool, but the learning curve is fairly steep and you can end up making a lot of bad mistakes<sup id=\"fnref:1\"><a class=\"footnote-ref\" href=\"#fn:1\">1</a></sup>. Here is my ongoing cheat sheet of exiftool commands.</p>\n\n\n<script src=\"https://gist.github.com/rjames86/33b9af12548adf091a26.js\"></script>\n\n<div class=\"footnote\">\n<hr />\n<ol>\n<li id=\"fn:1\">\n<p>I still make a backup copy of my photos before ever making changes.&#160;<a class=\"footnote-backref\" href=\"#fnref:1\" title=\"Jump back to footnote 1 in the text\">&#8617;</a></p>\n</li>\n</ol>\n</div>",
            "summary": "<p>I've spent a lot of time organizing and <a href=\"{static}../2014-03-01/2014-03-01%20Digitizing%20the%20Family%20Photos.md\">digitizing</a> old photos. Exiftool has been a great tool, but the learning curve is fairly steep and you can end up making a lot of bad mistakes<sup id=\"fnref:1\"><a class=\"footnote-ref\" href=\"#fn:1\">1</a></sup>. Here is my ongoing cheat sheet of exiftool commands.</p>\n",
            "date_published": "2014-09-28T12:22:00-07:00",
            "author": {
                "name": "Ryan M",
                "url": "https://ryanmo.co/author/ryan-m.html"
            },
            "tags": [
                "exiftool",
                "photos"
            ]
        },
        {
            "id": "https://ryanmo.co/2014/09/04/instagram-slogger",
            "url": "https://ryanmo.co/2014/09/04/instagram-slogger",
            "title": "Instagram for Slogger",
            "content_html": "<p>In early 2013, I discovered Slogger and loved the idea of journalling about more than just what I had to say. What I was listening to at a given time is just as important as what I was thinking. However, there wasn't an ideal way to log Instagram posts without other dependencies, and so I took a stab at writing my first plugin.</p>\n\n\n<hr />\n<p><em>Update</em></p>\n<p>As of June 2016, Instagram has changed their API and no longer allows this script to work. Sorry :(</p>\n<hr />\n<p>I didn't know ruby and quickly learned how bad some API documentation can be, but I wanted this plugin more than all the others. After fiddling with it for an evening, I was able to log Instagram posts with more than just a photo, including:</p>\n<ul>\n<li>number of likes</li>\n<li>comments</li>\n<li>date of post, not the date Slogger ran</li>\n<li>location data (including place name if you used Foursquare checkin)</li>\n</ul>\n<p>The last point is by far my favorite. I can look at a map over the last year and see all the Instagram photos I've taken and where I took them</p>\n<p><img alt=\"Instagram map\" src=\"https://ryanmo.co/2014/09/04/instagram-slogger/dayonemap.png\" /></p>\n<p>I also wanted to import photos that I had already taken. The plugin now will let you set <code>backdate: true</code> and will log the last 20 photos that you had posted on Instagram. Once it's finished, it'll automatically set itself to false to prevent duplicate posts<sup id=\"fnref:1\"><a class=\"footnote-ref\" href=\"#fn:1\">1</a></sup>.</p>\n<p>Setup is fairly straight forward. I create a local server, which runs you through the Instagram OAuth flow. After you've finished, you simply paste in the access token, and it'll run from there</p>\n<div class=\"codehilite\"><pre><span></span><code>&gt; ./slogger -o instagram\nInitializing Slogger v2 <span class=\"o\">(</span><span class=\"m\">2</span>.1.14<span class=\"o\">)</span>...\n<span class=\"m\">08</span>:01:18      InstagramLogger: Instagram requires configuration, please run from the <span class=\"nb\">command</span> line and follow the prompts\n\n------------- Instagram Configuration --------------\n\nSlogger will now open an authorization page <span class=\"k\">in</span> your default web browser. Copy the code you receive and <span class=\"k\">return</span> here.\n\nPress Enter to <span class=\"k\">continue</span>...\n</code></pre></div>\n\n<p>Last night I finally did a pull request and it went live this morning. You can check out and download the latest Slogger on <a href=\"https://github.com/ttscoff/Slogger\">Github</a>. If you find any issues or bugs, please send them my way. Enjoy!</p>\n<p><img alt=\"Instagram map\" src=\"https://ryanmo.co/2014/09/04/instagram-slogger/dayone.png\" /></p>\n<div class=\"footnote\">\n<hr />\n<ol>\n<li id=\"fn:1\">\n<p>It looks like in the newest version of Slogger, you can find and delete duplicate posts.&#160;<a class=\"footnote-backref\" href=\"#fnref:1\" title=\"Jump back to footnote 1 in the text\">&#8617;</a></p>\n</li>\n</ol>\n</div>",
            "summary": "<p>In early 2013, I discovered Slogger and loved the idea of journalling about more than just what I had to say. What I was listening to at a given time is just as important as what I was thinking. However, there wasn't an ideal way to log Instagram posts without other dependencies, and so I took a stab at writing my first plugin.</p>\n",
            "date_published": "2014-09-04T00:00:00-07:00",
            "author": {
                "name": "Ryan M",
                "url": "https://ryanmo.co/author/ryan-m.html"
            },
            "tags": [
                "automation",
                "slogger",
                "dayone",
                "photos"
            ]
        },
        {
            "id": "https://ryanmo.co/2014/08/01/find-images-with-no-exif-dates",
            "url": "https://ryanmo.co/2014/08/01/find-images-with-no-exif-dates",
            "title": "Find images with No Exif Dates",
            "content_html": "<p>My Dropbox folder is full of images claiming to be \"missing dates.\" <sup id=\"fnref:1\"><a class=\"footnote-ref\" href=\"#fn:1\">1</a></sup> Some of these photos were thumbnails or images from DayOne that didn't necessarily need dates, but others were real photos that for whatever reason didn't have dates that Dropbox recognized.</p>\n\n\n<p><img alt=\"Carousel Missing Photos\" src=\"https://ryanmo.co/2014/08/01/find-images-with-no-exif-dates/carousel_missing.png\" /></p>\n<p>I did some poking around, and found that there were a couple of different reasons why my photos in Dropbox weren't displaying dates:</p>\n<ul>\n<li>The DateTimeOriginal exif tag was missing entirely</li>\n<li>The DateTimeOriginal was set to 0000:00:00 00:00:00</li>\n</ul>\n<p>With the magic of <a href=\"http://www.sno.phy.queensu.ca/~phil/exiftool/\">exiftool</a>, I found a way to find all the photos in my Dropbox folder that were missing dates and output the results to a CSV.</p>\n<div class=\"codehilite\"><pre><span></span><code>exiftool -filename -r -if <span class=\"s1\">&#39;(not $datetimeoriginal or ($datetimeoriginal eq &quot;0000:00:00 00:00:00&quot;)) and ($filetype eq &quot;JPEG&quot;)&#39;</span> -common -csv &gt; ~/Dropbox/nodates.csv\n</code></pre></div>\n\n<p>This will give you a CSV with all of the common file information for the images. </p>\n<p><img alt=\"CSV of Missing Photos\" src=\"https://ryanmo.co/2014/08/01/find-images-with-no-exif-dates/csv.png\" /></p>\n<p>At this point, you'll need to decide how you'll want to fix these photos. From what I have seen so far, the best exif tag to go on is <code>-filemodifydate</code>, but you'll probably need to figure that out on your own. If you want to fix any photo that matches the above criteria, you can do something like this</p>\n<div class=\"codehilite\"><pre><span></span><code>exiftool <span class=\"sb\">`</span>-datetimeoriginal&lt;filemodifydate<span class=\"sb\">`</span> -r -if <span class=\"s1\">&#39;(not $datetimeoriginal or ($datetimeoriginal eq &quot;0000:00:00 00:00:00&quot;)) and ($filetype eq &quot;JPEG&quot;)&#39;</span> ~/Dropbox\n</code></pre></div>\n\n<div class=\"footnote\">\n<hr />\n<ol>\n<li id=\"fn:1\">\n<p>2965 photos to be exact.&#160;<a class=\"footnote-backref\" href=\"#fnref:1\" title=\"Jump back to footnote 1 in the text\">&#8617;</a></p>\n</li>\n</ol>\n</div>",
            "summary": "<p>My Dropbox folder is full of images claiming to be \"missing dates.\" <sup id=\"fnref:1\"><a class=\"footnote-ref\" href=\"#fn:1\">1</a></sup> Some of these photos were thumbnails or images from DayOne that didn't necessarily need dates, but others were real photos that for whatever reason didn't have dates that Dropbox recognized.</p>\n",
            "date_published": "2014-08-01T00:00:00-07:00",
            "author": {
                "name": "Ryan M",
                "url": "https://ryanmo.co/author/ryan-m.html"
            },
            "tags": [
                "bash",
                "automation",
                "exiftool",
                "photos"
            ]
        },
        {
            "id": "https://ryanmo.co/2014/04/06/100-happy-days",
            "url": "https://ryanmo.co/2014/04/06/100-happy-days",
            "title": "100 Happy Days",
            "content_html": "<p>A few people from work convinced me to participate in <a href=\"http://100happydays.com\">100 Happy Days</a>. Since I'm already doing a \"selfie a day\" so I figured adding one more photo a day wouldn't hurt. What I didn't want to do is post to the various social media sites every single day and spam all my followers. Hazel and my blog helped me solve this problem.</p>\n\n\n<h3 id=\"hazel\">Hazel</h3>\n<p>Similar to my <a href=\"{static}../2014-01-05/2014-01-05_Organizing-Special-Photo-with-Hazel.md\">previous post</a>, I'm using Hazel to detect special types of photos. I decided for 100 Happy Days I would always take the photos using the default Camera in square mode.</p>\n<p><img alt=\"1 Happy Day of Coffee\" src=\"https://ryanmo.co/posts/Tech/2014-04-06/3.jpg\" /></p>\n<p>Hazel makes this really simple. Each time a photo that matches the criteria comes into my Dropbox Camera Uploads folder, it gets resorted and renamed to YYYY-mm-dd.jpg.</p>\n<p><img alt=\"Hazel Rule for Photos\" src=\"https://ryanmo.co/posts/Tech/2014-04-06/hazel1.png\" /></p>\n<p>This simply takes care of the photos themselves. But now I want them to also appear on my blog. I have a separate rule that watches this new folder of photos and moves them into my Pelican project folder.</p>\n<p><img alt=\"Hazel Rule for Pelican\" src=\"https://ryanmo.co/posts/Tech/2014-04-06/hazel2.png\" /></p>\n<p>The key to this one is that I name them with sequential numbers, starting with 1.jpg. This will be useful later for my blog.</p>\n<h3 id=\"pelican-blog\">Pelican Blog</h3>\n<p>I decided to set up a hidden page on my blog to host these images. I created a custom template since it's fairly unique and different from the rest of my blog. The meat of the template is just this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">&lt;</span><span class=\"nt\">article</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">h3</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;{{ SITEURL }}/{{ page.url }}&quot;</span><span class=\"p\">&gt;</span>{{ page.title }}<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">h3</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&quot;two-columns&quot;</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;grid-container&quot;</span> <span class=\"na\">style</span><span class=\"o\">=</span><span class=\"s\">&quot;display:block;&quot;</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">ul</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;rig columns-2&quot;</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">article</span><span class=\"p\">&gt;</span>\n</code></pre></div>\n\n<p>I'm using the CSS for the gallery from <a href=\"http://alijafarian.com/responsive-image-grids-using-css/\">this</a> post by Ali Jafarian.</p>\n<p>This is where my Hazel photo naming comes in handy. I'm using a simply JavaScript function to embed these images on page load.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">function</span> <span class=\"nx\">createImages</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">start_date</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(</span><span class=\"mf\">2014</span><span class=\"p\">,</span> <span class=\"mo\">03</span><span class=\"p\">,</span> <span class=\"mo\">03</span><span class=\"p\">)</span> <span class=\"c1\">// April 3, 2014</span>\n    <span class=\"nx\">days_passed</span> <span class=\"o\">=</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">floor</span><span class=\"p\">((</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"nx\">start_date</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mf\">1000</span> <span class=\"o\">/</span> <span class=\"mf\">86400</span><span class=\"p\">);</span>\n    <span class=\"nx\">extension</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.jpg&#39;</span><span class=\"p\">;</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mf\">1</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;=</span> <span class=\"nx\">days_passed</span> <span class=\"o\">+</span> <span class=\"mf\">1</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">li</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">&#39;li&#39;</span><span class=\"p\">);</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">img</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">&#39;img&#39;</span><span class=\"p\">);</span>\n        <span class=\"nx\">img</span><span class=\"p\">.</span><span class=\"nx\">src</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/images/100daysofhappiness/&#39;</span> <span class=\"o\">+</span> <span class=\"nx\">i</span> <span class=\"o\">+</span> <span class=\"nx\">extension</span><span class=\"p\">;</span>\n        <span class=\"nx\">img</span><span class=\"p\">.</span><span class=\"nx\">setAttribute</span><span class=\"p\">(</span><span class=\"s2\">&quot;onError&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;this.onerror=null;this.src=&#39;/images/imagenotfound.jpg&#39;&quot;</span><span class=\"p\">);</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">h3</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">&#39;h3&#39;</span><span class=\"p\">);</span>\n        <span class=\"nx\">h3</span><span class=\"p\">.</span><span class=\"nx\">textContent</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Day &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">i</span><span class=\"p\">;</span>\n        <span class=\"nx\">li</span><span class=\"p\">.</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nx\">img</span><span class=\"p\">);</span>\n        <span class=\"nx\">li</span><span class=\"p\">.</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nx\">h3</span><span class=\"p\">);</span>\n        <span class=\"nx\">jQuery</span><span class=\"p\">(</span><span class=\"s1\">&#39;.rig&#39;</span><span class=\"p\">).</span><span class=\"nx\">append</span><span class=\"p\">(</span><span class=\"nx\">li</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">jQuery</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">).</span><span class=\"nx\">ready</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">createImages</span><span class=\"p\">();</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n\n<p>I can easily compute the number of days that have passed and safely assume that an image exists for each of those days. I learned today that if you add the attribute <code>onError</code> to an image, you can create a fallback image in case the real image source doesn't exist.</p>",
            "summary": "<p>A few people from work convinced me to participate in <a href=\"http://100happydays.com\">100 Happy Days</a>. Since I'm already doing a \"selfie a day\" so I figured adding one more photo a day wouldn't hurt. What I didn't want to do is post to the various social media sites every single day and spam all my followers. Hazel and my blog helped me solve this problem.</p>\n",
            "date_published": "2014-04-06T00:00:00-07:00",
            "author": {
                "name": "Ryan M",
                "url": "https://ryanmo.co/author/ryan-m.html"
            },
            "tags": [
                "hazel",
                "pelican",
                "photos"
            ]
        },
        {
            "id": "https://ryanmo.co/2014/03/04/quick-sharing-with-launch-center-pro-and-dropbox",
            "url": "https://ryanmo.co/2014/03/04/quick-sharing-with-launch-center-pro-and-dropbox",
            "title": "Quick Sharing with Launch Center Pro and Dropbox",
            "content_html": "<p>I've been finding more and more reasons to use Launch Center Pro recently. With the fairly recent addition of Dropbox actions, I've been finding new ways to share links quickly. </p>\n\n\n<p><img alt=\"Launch Center Pro and Dropbox\" src=\"https://ryanmo.co/2014/03/04/quick-sharing-with-launch-center-pro-and-dropbox/lcp_dropbox.png\" /></p>\n<p>I take a lot of quick photos that I never plan to keep around. In most cases, it's just to send to someone quickly. iMessage is easy, but the images aren't compressed nearly enough and can take a while to upload. I've now started uploading the images to Dropbox and sharing the link. The upload speed is reduced since Launch Center Pro will take care of reducing the quality before uploading. The message sends almost instantly because there isn't an attachment. Here are a few of workflows I use with Dropbox:</p>\n<h3 id=\"upload-last-photo-taken-and-get-the-link\">Upload last photo taken and get the link</h3>\n<p><em>This is if I simply need a quick link to share anywhere. The image uploads at 50% quality. I have a folder called Temp/_Destrctable Folder where I keep all my throwaway images. I'm using the TextExpander snippet ..ttimestamp to name the files like 14-03-08-19.42.45.jpg</em></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">launchpro-dropbox://addlastphoto?path=/Temp/_Destructable Folder&amp;name=&lt;..ttimestamp&gt;.jpg&amp;quality=50&amp;getlink=1</span>\n</code></pre></div>\n\n<h3 id=\"upload-last-photo-and-put-the-link-in-an-in-app-message-body\">Upload last photo and put the link in an in-app message body</h3>\n<p><em>Quick sharing with iMessage. Settings are the same as above.</em> </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">launch://x-callback-url/dropbox/addphoto?attach=photo&amp;path=/Temp/_Destructable Folder&amp;name=&lt;..ttimestamp&gt;.jpg&amp;quality=50&amp;getlink=1&amp;x-success=launch%3A//messaging%3Fbody%3D%5Bclipboard%5D</span>\n</code></pre></div>\n\n<h3 id=\"upload-from-any-source-to-dropbox\">Upload from any source to Dropbox</h3>\n<p><em>Nice if you haven't taken the photo yet</em></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">launch://dropbox/addphoto?attach=photo&amp;path=&amp;name=&amp;quality=&amp;getlink=1</span>\n</code></pre></div>",
            "summary": "<p>I've been finding more and more reasons to use Launch Center Pro recently. With the fairly recent addition of Dropbox actions, I've been finding new ways to share links quickly. </p>\n",
            "date_published": "2014-03-04T00:00:00-08:00",
            "author": {
                "name": "Ryan M",
                "url": "https://ryanmo.co/author/ryan-m.html"
            },
            "tags": [
                "ios",
                "automation",
                "Dropbox",
                "launchcenterpro",
                "photos"
            ]
        },
        {
            "id": "https://ryanmo.co/2014/03/01/digitizing-the-family-photos",
            "url": "https://ryanmo.co/2014/03/01/digitizing-the-family-photos",
            "title": "Digitizing the Family Photos",
            "content_html": "<p>I had this ongoing fear that all of our family photos would get lost or destroyed. I've always wanted to have a central place for all of my photos, both past and present. In early 2012, my mom and I started on a project to scan, crop and organize all of our old photos from negatives.</p>\n\n\n<h1 id=\"going-digital\">Going Digital</h1>\n<p>I was fortunate that when I decided to take on this project, my mom already had two large Epson flatbed scanners with transparency adapters. What was even better was that my mom was highly organized over the years and archived all of the negatives of every photo she had ever taken. This only left us with one thing to do: scan the photos.  Since I was living in California and my mom in Montana, the work of pulling the negatives and scanning them was going to be done by my mom. We also needed to have a way to transfer the files from her computer to mine. Dropbox was an obvious choice in this case, but there was one problem that would complicate everything: hard drive space. </p>\n<p>My mom was still using her PowerMac G5 at the time and hard drive space was pretty limited. It wouldn't have taken long before she wouldn't have enough space to even scan the photos. As a simple solution, once the scans were uploaded and synced to my computer, I could have manually removed the files and place them on my own computer, but I was lazy and didn't want to check constantly whether new files had been added. At the time, I was just learning how to code and thought this would be good practice <sup id=\"fnref:1\"><a class=\"footnote-ref\" href=\"#fn:1\">1</a></sup>. I ended up writing a script that would mirror the folder structure for the scans in our Dropbox shared folder on my local Desktop and then remove the original file in Dropbox. The old folder structure was maintained so that if any new files were added to the same folder, my mom wouldn't have to recreate them. I then set this up as a cron job to run once a day and then send me an email digest of all the files that were transferred.</p>\n<p>After a couple of weeks, I had nearly 15 years of photos in folders organized by year totaling around 85GB. Each Photoshop file was around 1.GB each and the photos were scanned at 300dpi. Now the hardest and longest part of the project was about to begin.</p>\n<p><img alt=\"Folder Structure\" src=\"https://ryanmo.co/2014/03/01/digitizing-the-family-photos/folders.png\" /></p>\n<h1 id=\"cropping-resizing-and-renaming\">Cropping, Resizing, and Renaming</h1>\n<p>I wasn't entirely sure how I was going to do this part efficiently. My mom hadn't laid out the photos in a symmetric grid and there wasn't a reliable way to detect photo borders. I also decided beforehand that I wanted to preserve the original files and so I would save an individual Photoshop file for each photo that was cropped. I then wanted to have a separate folder that was simply for viewing the files.</p>\n<p>Starting off, I wanted to try manually doing everything and automate things over time. Cropping the files using the marquee tool was always going to be manual. I would select the file, copy it, create a new file with the dimensions from the clipboard and then paste the photo into the new file. After I had gone through the entire file, I would save all the files at once with random names (you'll see later why the naming here didn't matter). This part immediately became tedious. I did some research on how I could make this easier or faster and discovered Photoshop actions<sup id=\"fnref:2\"><a class=\"footnote-ref\" href=\"#fn:2\">2</a></sup>. What was great about this was I was able to record every step I was taking into one single keyboard shortcut. This broke down the process to simply selecting the photo and hitting shift-F1. This one keyboard shortcut took care of copying the file, creating a new file with the dimensions of the clipboard, pasting and then finally selecting the previous file. That last step was key. Instead of a final control-tab to move back to the original file, the action took care of it for me. You can download the Photoshop action <a href=\"https://ryanmo.co/2014/03/01/digitizing-the-family-photos/Scans.atn\">here</a>.</p>\n<p><img alt=\"Actions Screenshot\" src=\"https://ryanmo.co/2014/03/01/digitizing-the-family-photos/actions_screenshot.png\" /></p>\n<p>At this point, I had an original Photoshop file and a folder called Cropped where all the new photos lived. I now needed a way to rename these files to something meaningful. Automator and Alfred made this simple. After I finished cropping, I would select all of the newly created files, run my Alfred extension \"Rename Scans\" which would trigger an automator script, prompt me to name the files, and then each file would be renamed from something like Untitled1.psd to November 1987_1.psd.</p>\n<p>At this point, the final step for each of these files was to create a viewable JPG for every photo. Turns out, Photoshop has a great feature called Image Processor. After the files were neatly renamed, I would open up the Image Processor, select the folder, and hit go. My settings were always saved so there wasn't much else to be done each time I ran this. I would take the Photoshop files, create a new JPG at 5 quality in a new folder called Low Res Images with the same naming convention. </p>\n<p><img alt=\"Image Processor\" src=\"https://ryanmo.co/2014/03/01/digitizing-the-family-photos/image_processor.png\" /></p>\n<p>I was then able to share this folder back with my mom and the rest of my family. They enjoyed watching the photos get added over the last year or so as I casually worked on the files.</p>\n<p>Once I had done all of the steps for each file, I would move the folder of PSD files into a folder called Done. This simply gave me a better idea of how many folders I had left to work on.</p>\n<h1 id=\"viewing\">Viewing</h1>\n<p>In late January 2014, I finally finished cropping all of the photos. I never intended on it taking quite this long, but it was never something that needed to have a deadline. It felt great to know that I was finally done and could just sit back and look at all of the old photos from what I was little. I was using <a href=\"http://www.lynapp.com\">Lyn</a> to view all the photos and realized that something was a little off. All of the photos were out of order. All of the folders had been named as Month Year, and even if I was viewing all of the photos at the same time, they were sorted in the order that I had created the files, not the time they were actually taken. I couldn't sort them in a photo viewer, Dropbox's photo tab would sort them by file creation and not EXIF date taken, and using Spotlight search was more-or-less pointless. There was no way  that I was going to manually date 3,300 photos by hand. I had used the command line tool <a href=\"http://www.sno.phy.queensu.ca/~phil/exiftool/\">exiftools</a> a few times, and I started looking into whether this would be a possibility for dating the files. It turned out that the command was really straightforward for naming a folder</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">exiftool</span> <span class=\"s2\">&quot;-AllDates=1999:12:31 12:00:00&quot;</span> <span class=\"n\">foldername</span><span class=\"o\">/</span>\n</code></pre></div>\n\n<p>Even though I could have done it by hand, I didn't really want to have to type this in for 80 or so folders of photos. I quickly wrote up a Python script that would parse out the date from the folder names and prompt me to confirm whether this was correct or not. I was fine hitting Enter 80 times. </p>\n<p>Some of the folders were called things like January-March 1995. For these cases, I would just assume the first month for the date. I wasn't going for perfection, but rather a good estimate for the time the photos were taken.</p>\n<p>You can take a look at the script <a href=\"https://ryanmo.co/2014/03/01/digitizing-the-family-photos/convert_exif_dates.py\">here</a>. Do note that the script is really specific to my folder structure so it might not work perfectly for you, but it'll be a good start if you need to do something like this.</p>\n<p><img alt=\"Lyn App\" src=\"https://ryanmo.co/2014/03/01/digitizing-the-family-photos/lynapp.png\" /></p>\n<h1 id=\"what-i-learned\">What I Learned</h1>\n<p>Epson now makes a <a href=\"http://www.epson.com/cgi-bin/Store/jsp/Product.do?BV_UseBVCookie=yes&amp;sku=B11B178061\">scanner</a> that eliminates a lot of the hard work around cropping the photos. It's expensive, but it would have saved me a lot of work.</p>\n<p>I've made this comment before, but I still would love to have a way to embed facial recognition into the metadata of photos. My perfect world would be having the ability to do something like search for all of the photos of my brother before 1995.</p>\n<p>Ultimately, this was a long, but satisfying project. I sleep better at night knowing that all of our family photos are backed up and not be lost forever if there were ever to be a disaster.</p>\n<div class=\"footnote\">\n<hr />\n<ol>\n<li id=\"fn:1\">\n<p>For those who want to see the script, <a href=\"https://ryanmo.co/2014/03/01/digitizing-the-family-photos/movescans.py\">here</a> it is. Please don't judge me. This was actually one of my first real scripts I had ever written. I know there are better ways to do a lot of it.&#160;<a class=\"footnote-backref\" href=\"#fnref:1\" title=\"Jump back to footnote 1 in the text\">&#8617;</a></p>\n</li>\n<li id=\"fn:2\">\n<p>I'm a total Photoshop newb&#160;<a class=\"footnote-backref\" href=\"#fnref:2\" title=\"Jump back to footnote 2 in the text\">&#8617;</a></p>\n</li>\n</ol>\n</div>",
            "summary": "<p>I had this ongoing fear that all of our family photos would get lost or destroyed. I've always wanted to have a central place for all of my photos, both past and present. In early 2012, my mom and I started on a project to scan, crop and organize all of our old photos from negatives.</p>\n",
            "date_published": "2014-03-01T00:00:00-08:00",
            "author": {
                "name": "Ryan M",
                "url": "https://ryanmo.co/author/ryan-m.html"
            },
            "tags": [
                "python",
                "alfred",
                "hazel",
                "dropbox",
                "bash",
                "photos"
            ]
        },
        {
            "id": "https://ryanmo.co/2014/01/11/my-photo-workflow",
            "url": "https://ryanmo.co/2014/01/11/my-photo-workflow",
            "title": "My Photo Workflow",
            "content_html": "<p>After listening to the Mac Power Users <a href=\"http://www.macpowerusers.com/2014/01/05/mac-power-users-171-photo-management/\">episode</a> on photo management and reading the slew of follow up blog posts on other photo management workflows, I thought I would share mine as well.  While my workflow will be fairly similar to <a href=\"http://www.macstories.net/tutorials/my-photo-management-workflow-early-2014/\">Federico Viticci's</a> with a few exceptions, I thought I would share the way that I take, organize, view and share my photos.</p>\n\n\n<h2 id=\"taking-photos\">Taking Photos</h2>\n<p>My iPhone is one of the main ways that I take photos. Since it's always in my pocket and takes great quality photos, it's by far the easiest way to take photos no matter where I am.  I've had a lot of fun with the iPhone 5S and the burst and slo-mo modes.</p>\n<p>I've never considered myself a photographer. For a long time, I had my mom's hand-me-down Olympus E-500. It was a great camera, but I had no idea how to use it and it was bigger than I preferred. Before moving to Ireland, I decided that I wanted to learn the basics of photography and have a camera that would grow with me as I learned more. The Olympus PEN E-P5 had just started pre-order and I decided that this would be my first \"real\" camera. I only had a few requirements, and it fortunately satisfied both of them: GPS tagging and small/lightweight. I've now had this the E-P5 for a little over 6 months and couldn't be happier. </p>\n<p><img alt=\"Olympus PEN E-P5\" src=\"https://ryanmo.co/2014/01/11/my-photo-workflow/ep5.jpg\" /></p>\n<h2 id=\"importing\">Importing</h2>\n<p>I only have one main way to upload my photos - Dropbox Camera Uploads. Whether I use the Dropbox app for iOS or the desktop application, my photos end up in the same place to get processed (more on that later in <a href=\"#organization\">Organization</a>). </p>\n<p>Any photos that are taken on my iPhone are quickly uploaded via the Dropbox app. When I use my E-P5, I will first turn on the built-in Wifi to sync GPS data from my phone to the camera<sup id=\"fnref:1\"><a class=\"footnote-ref\" href=\"#fn:1\">1</a></sup>. Once that is all taken care of, I plug the camera into my laptop and Dropbox grabs the new photos and imports them.</p>\n<h2 id=\"organization\">Organization</h2>\n<p>I'm still pretty new to Hazel, but dealing with my photos was the reason I decided to bite the bullet and buy it. My Dropbox Camera Uploads folder was nearing 900 photos and I hadn't taken the time to organize them in over a year. </p>\n<p>Before Camera Uploads, I was suffering through iPhoto. It always bothered me that my photos were obfuscated from view. I always found myself wasting time trying to find the original or using the export option. When Camera Uploads was released, I searched for a way to cleanly export my photos into a Year-Month-Event folder structure. I discovered <a href=\"https://github.com/BMorearty/exportiphoto\">this script</a> that gave me more than what I wanted and solved my problem perfectly. For anyone who wants to use this, the command I used was</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\"># -x deconflict export directories of same name</span>\n<span class=\"c1\"># -d stop use date prefix in folder name</span>\n<span class=\"c1\"># -y add year directory to output</span>\npython exporti_photo.py -x -d -y\n</code></pre></div>\n\n<p>I've been using the Year-Month-Event structure for a few years now and have starting running into a slight annoyance. I find myself constantly flipping between months trying to remember when a certain event happened. I finally came to the conclusion that the month directory was pretty unnecessary. What I decided on was the folder structure Year-MM.YY Event Name. </p>\n<p><img alt=\"New Photo Structure\" src=\"https://ryanmo.co/2014/01/11/my-photo-workflow/photo_list.png\" /></p>\n<p>This gives me a much easier way to visualize my photos by event name rather than poking through folders by month.</p>\n<p>My Hazel workflow is fairly simple, but takes care of everything in one rule. I've set up a few exceptions for photo types that don't need to be sorted, such as screenshots or other PNG files. I also have rules set up for fun projects like my <a href=\"/2014/01/05/organizing-special-photos-with-hazel\">\"photo a day\"</a>.</p>\n<p><img alt=\"Hazel Rule\" src=\"https://ryanmo.co/2014/01/11/my-photo-workflow/photos_hazel.png\" /></p>\n<p>Finally once photos are sorted, I will manually go in and individually name all of the events that were created. This makes it much easier to search for events in the future. The next step in my process here is to tag photos. The one feature I do miss about iPhoto was the facial recognition. Since I haven't found a way to do facial recognition outside of Aperture or iPhoto, I will manually go in and tag photos with the names of those in the photos. This has been very useful when I want to find photos of people in certain contexts. For example,  the tags <code>me</code>, <code>office</code>, <code>dublin</code> will give me photos of myself in the Dublin office, but not San Francisco.</p>\n<h2 id=\"consumption-and-sharing\">Consumption and Sharing</h2>\n<p>In Mac OS X, I have three ways that I view my photos. The first, and most basic is Finder.  The Cover Flow view in Finder is actually a great way to quickly go through photos and get the ones that you want. When I'm wanting to share my photos with others, I use the <a href=\"https://www.dropbox.com/photos\">Dropbox Photos</a> page. As a quick way to share a select number of photos quickly, I've still found this to be the best way. For general viewing and pruning of photos I don't want, I've been using a not so well known app called <a href=\"http://www.lynapp.com\">Lyn</a>. It has some nice features for sharing to multiple services, but what I really like about it is that it'll just watch a folder and display the photos in that folder. Lyn will also let me see all of the metadata about the photos, including a map if there is GPS information. Lastly, on the rare occasion that I want to edit my photo, I will import the photo into Aperture. For the same reasons I dislike iPhoto, I dislike Aperture. I will typically import the photo, edit it, and then export back into Dropbox.</p>\n<p><img alt=\"Lyn.app\" src=\"https://ryanmo.co/2014/01/11/my-photo-workflow/lyn.jpg\" /></p>\n<p>On iOS, I have two primary apps that I use to view my photos. The first, unsurprisingly, is the Dropbox app. For quick viewing and sharing, I will use Dropbox since that's where all of my photos live. As a Photos app replacement, I use <a href=\"http://unboundapp.com\">Unbound</a>. What's great about Unbound is that it treats folders in your Dropbox account like albums. Since my photos are organized this way anyways, I get perfectly created albums that I can view and even cache to my phone for offline viewing.</p>\n<p><img alt=\"Dropbox and Unbound\" src=\"https://ryanmo.co/2014/01/11/my-photo-workflow/unbound_dropbox.jpg\" /></p>\n<h2 id=\"the-future\">The Future</h2>\n<p>Dropbox has been doing a great job improving the photo experience. Photo organization is a very personal thing and trying to solve this for the majority is not an easy task. Many companies are trying to do this, and so far there has been no clear winner. As much as I love my folder organization, I would really like to get to a point where I don't even have to worry about where my photos are. The metadata of the photos should be enough for an application or website to organize the photos for me.</p>\n<p>I mentioned this earlier, but one other thing I would really like to see is a 3rd-party app that does facial recognition and applies tags or some other bit of metadata to the file. Tagging my photos with peoples' names is by far the most manual part of my photos workflow, but also one of the most important to me.</p>\n<div class=\"footnote\">\n<hr />\n<ol>\n<li id=\"fn:1\">\n<p>The GPS data is stored on the SD card, but I haven't taken the time to see if I can add this metadata after importing from Dropbox&#160;<a class=\"footnote-backref\" href=\"#fnref:1\" title=\"Jump back to footnote 1 in the text\">&#8617;</a></p>\n</li>\n</ol>\n</div>",
            "summary": "<p>After listening to the Mac Power Users <a href=\"http://www.macpowerusers.com/2014/01/05/mac-power-users-171-photo-management/\">episode</a> on photo management and reading the slew of follow up blog posts on other photo management workflows, I thought I would share mine as well.  While my workflow will be fairly similar to <a href=\"http://www.macstories.net/tutorials/my-photo-management-workflow-early-2014/\">Federico Viticci's</a> with a few exceptions, I thought I would share the way that I take, organize, view and share my photos.</p>\n",
            "date_published": "2014-01-11T00:00:00-08:00",
            "author": {
                "name": "Ryan M",
                "url": "https://ryanmo.co/author/ryan-m.html"
            },
            "tags": [
                "hazel",
                "automation",
                "dropbox",
                "ios",
                "photos"
            ]
        },
        {
            "id": "https://ryanmo.co/2014/01/05/organizing-special-photos-with-hazel",
            "url": "https://ryanmo.co/2014/01/05/organizing-special-photos-with-hazel",
            "title": "Organizing Special Photos with Hazel",
            "content_html": "<p>Nearly all of my photos are sorted based on year, month and day. Hazel easily takes care of of this for me, but occasionally I will have projects where photos need to be excluded or organized in a different way. With Hazel, I can still account for these special cases with extra bits of metadata.</p>\n\n\n<p>This may not come in handy to anyone, but I thought it would be worth showing some of the creative ways that Hazel can be used to organize your files based on more than just creation/modification time or file type.</p>\n<p>In late May 2013, I decided I wanted to do one of those time lapse videos where you take a picture of yourself in front of the camera every day. At first, the hardest part was just remembering to take the picture each day. Once I was in the routine, I started to find the task monotonous to pull the photo from my Dropbox folder, rename it to YYYY-MM-DD.jpg and then move it into a special folder I had creatively named \"Picture a Day.\" Hazel was already taking care of my general photo organization, but I wanted to ensure that these photos got organized specifically so I started digging into the special traits of these photos. I quickly found a few default options in Hazel that would help me do this:</p>\n<ul>\n<li>Device make</li>\n<li>Pixel width/height</li>\n<li>Content creator</li>\n</ul>\n<p>I was always using Camera+ for these photos because of the grid and level features. It allowed me to align my face in the same place in the photos. Since I always used the front camera, the dimensions of the photos remained the same. After playing around, here is the Hazel rule I came up with</p>\n<p><img alt=\"Hazel Picture a Day\" src=\"https://ryanmo.co/2014/01/05/organizing-special-photos-with-hazel/hazel_picture_a_day.png\" /></p>\n<p>Another key piece here is the datestamp token. The rule watches for Dropbox's Camera Uploads filename format YYYY-MM-DD HH.MM.SS.jpg. This wouldn't be necessary except for that this token then becomes useful in the actions portion. I can take that token and rename the file based on the token to simply YYYY-MM-DD.jpg since I don't care about the hour the photo was taken. What's great about the token is that this will prevent accidental naming of the file if I happen to upload it the next day or I'm flying between Ireland and the US and date times get messed up.</p>\n<p>While this rule is fairly specific, it's saved me a lot of time having to organize the photos manually. </p>",
            "summary": "<p>Nearly all of my photos are sorted based on year, month and day. Hazel easily takes care of of this for me, but occasionally I will have projects where photos need to be excluded or organized in a different way. With Hazel, I can still account for these special cases with extra bits of metadata.</p>\n",
            "date_published": "2014-01-05T00:00:00-08:00",
            "author": {
                "name": "Ryan M",
                "url": "https://ryanmo.co/author/ryan-m.html"
            },
            "tags": [
                "hazel",
                "automation",
                "photos"
            ]
        },
        {
            "id": "https://ryanmo.co/2013/09/05/instascriptogram",
            "url": "https://ryanmo.co/2013/09/05/instascriptogram",
            "title": "Instascriptogram. Post Instagram pics to Scriptogr.am",
            "content_html": "<p><strong>[Update 2014-11-19]</strong>\nI've since moved off of scriptogr.am. The service wasn't working for a long time and doesn't seem to be in active developement. I ended up moving that blog over to a static blog with Pelican similar to this one.</p>\n<hr />\n\n<p>Since moving to Dublin, my girlfriend and I have wanted to keep our friends and family up-to-date on everything we've been doing. I recently bought the new Olympus E-P5 and have been taking a lot of pictures. So that everyone knows what we're doing, we decided to share a <a href=\"http://www.scriptogr.am\">Scriptogr.am</a> blog and post pictures of our adventures. </p>\n\n\n<p>Sometimes it's quick and easy to snap a picture on Instagram and share with all your friends, but my parents and family aren't on Instagram, but they know to follow my blog for updates. Instead of having to manually pull the pics down, write up a post and publish it, I used a combination of IFTTT, Dropbox and my server at Macminicolo.net to do all the work for me.</p>\n<p>The magic starts at IFTTT. I have a <a href=\"https://ifttt.com/recipes/115652\">recipe</a> that watched for a particular tag when I post to Instagram. If that tag exists, a text file is saved to my Dropbox account. I have a cron running once an hour<sup id=\"fnref:1\"><a class=\"footnote-ref\" href=\"#fn:1\">1</a></sup> to run the script and check for any new files.</p>\n<p>One of the only complaints about Scriptogr.am has been that I have to manually hit a publish button before posts will go live. But with their API, the posts are immediate<sup id=\"fnref:2\"><a class=\"footnote-ref\" href=\"#fn:2\">2</a></sup>. Now, all of my Instagram adventures (and my girlfriend's) can be posted to our blog for friends and family to follow. Once the post is made, I get a Pushover notification letting me know that a post was made by either me or my girlfriend.</p>\n<p><img alt=\"pushover_instascriptogram\" src=\"https://ryanmo.co/2013/09/05/instascriptogram/pushover_instascriptogram.jpg\" /></p>\n<p>If you're interested in the script, it can be found on Github <a href=\"https://github.com/rjames86/instascriptogram\">here</a>. An example of the posts being made can be found at our travel blog <a href=\"http://keephouseadventures.com/posts/2013/Sep/03_12_44/instagram-pic-for-tuesday-sep-03/\">keephouseadventures.com</a></p>\n<div class=\"footnote\">\n<hr />\n<ol>\n<li id=\"fn:1\">\n<p>I tried using Hazel for this, but I kept getting errors since I wasn't actually processing the file. Any suggestions on this, please let me know!&#160;<a class=\"footnote-backref\" href=\"#fnref:1\" title=\"Jump back to footnote 1 in the text\">&#8617;</a></p>\n</li>\n<li id=\"fn:2\">\n<p>Like what you get from apps like Byword&#160;<a class=\"footnote-backref\" href=\"#fnref:2\" title=\"Jump back to footnote 2 in the text\">&#8617;</a></p>\n</li>\n</ol>\n</div>",
            "summary": "\n<p>Since moving to Dublin, my girlfriend and I have wanted to keep our friends and family up-to-date on everything we've been doing. I recently bought the new Olympus E-P5 and have been taking a lot of pictures. So that everyone knows what we're doing, we decided to share a <a href=\"http://www.scriptogr.am\">Scriptogr.am</a> blog and post pictures of our adventures. </p>\n",
            "date_published": "2013-09-05T00:00:00-07:00",
            "date_modified": "2014-11-19T00:00:00-08:00",
            "author": {
                "name": "Ryan M",
                "url": "https://ryanmo.co/author/ryan-m.html"
            },
            "tags": [
                "dropbox",
                "automation",
                "ifttt",
                "photos"
            ]
        },
        {
            "id": "https://ryanmo.co/2013/05/08/instagram_and_slogger",
            "url": "https://ryanmo.co/2013/05/08/instagram_and_slogger",
            "title": "[Updated] Log Your Instagram Posts with Slogger",
            "content_html": "<hr />\n<p><strong>Update 2016-06-23</strong></p>\n<p>As of June 2016, Instagram has changed their API and no longer allows this script to work. Sorry :(</p>\n<p><em>Update 2014-09-04</em></p>\n<p>I recently submitted a new plugin that now comes with Slogger which uses the Instagram API. You can check out my post with more information <a href=\"{static}../2014-09-04/2014-09-04-instagram-slogger.md\">here</a>.</p>\n<hr />\n\n<p>I've received a few questions about <a href=\"https://ifttt.com/recipes/62754\">this</a> IFTTT recipe which logs my Instagram posts to Day One. There are a few others floating out there, but there are a couple of things that I wanted to have:</p>\n\n\n<ul>\n<li>The Day One entry date is the date the picture was taken</li>\n<li>The caption is saved in the journal entry</li>\n<li>Ignore duplicate posts if I also posted to Twitter</li>\n</ul>\n<p>The last point assumes that I'm also using the default Twitter logger. If you want to ignore all of your Instagram tweets, add the following to be on line 112 in the twitterlogger plugin:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">break</span> <span class=\"k\">if</span> <span class=\"n\">tweet_text</span><span class=\"o\">.</span><span class=\"n\">include?</span> <span class=\"s1\">&#39;instagram&#39;</span>\n</code></pre></div>\n\n<p>You can download the Instagram IFTTT Slogger extension <a href=\"https://ryanmo.co/2013/05/08/instagram_and_slogger/instagram_ifttt.rb\">here</a>. Simply add it to your plugins directory and run the following once to set up the slogger_config file:</p>\n<div class=\"codehilite\"><pre><span></span><code>./slogger -o instagram_ifttt\n</code></pre></div>\n\n<p>You'll need to set the location of your IFTTT slogger directory. The plugin will check for any text files and then automatically move them into a \"logged\" folder once they've been added to Day One. </p>\n<p><img alt=\"image\" src=\"https://ryanmo.co/2013/05/08/instagram_and_slogger/dayone_instagram.jpg\" /></p>",
            "summary": "\n<p>I've received a few questions about <a href=\"https://ifttt.com/recipes/62754\">this</a> IFTTT recipe which logs my Instagram posts to Day One. There are a few others floating out there, but there are a couple of things that I wanted to have:</p>\n",
            "date_published": "2013-05-08T00:00:00-07:00",
            "author": {
                "name": "Ryan M",
                "url": "https://ryanmo.co/author/ryan-m.html"
            },
            "tags": [
                "slogger",
                "dropbox",
                "dayone",
                "photos"
            ]
        }
    ],
    "title": "ryanmo.co",
    "version": "https://jsonfeed.org/version/1"
}