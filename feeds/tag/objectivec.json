{
    "author": {
        "name": "Ryan M"
    },
    "favicon": "https://ryanmo.co/images/favicon.png",
    "feed_url": "https://ryanmo.co/feeds/tag/objectivec.json",
    "home_page_url": "https://ryanmo.co",
    "items": [
        {
            "id": "https://ryanmo.co/2015/10/31/list-server-favorites-in-os-x-1011-el-capitan",
            "url": "https://ryanmo.co/2015/10/31/list-server-favorites-in-os-x-1011-el-capitan",
            "title": "List Server Favorites in OS X 10.11 El Capitan",
            "content_html": "<p>I'm using Alfred a lot less these days. Many of my workflows have been easier to build in Keyboard Maestro. The remaining few that are left in Alfred are ones that I heavily depend on, one of which is accessing my Server Favorites in OS X. </p>\n<p>Up until OS X 10.11 El Capitan, Server Favorites were stored in a plist file called <code>com.apple.sidebarlists.plist</code>. I finally got around to upgrading my computers at home only to realize that my \"server\" workflow stopped working. After inspecting the plist file, I found that those favorites were gone and were hiding elsewhere. After a bunch of searching, and the help of Houdaspot, I found them in <code>~/Library/Application Support/com.apple.sharedfilelist/com.apple.LSSharedFileList.FavoriteServers.sfl</code>. What is this <code>sfl</code> extension? Still not really sure, but after some poking around, <a href=\"https://gist.github.com/pudquick/4776b4b2075bf9b7e512\">this</a> was the only resource I could find that helped me get started. </p>\n<p>I don't necessarily like the CoreFoundation stuff in Python, and since I'm on a OS X JavaScript automation roll right now, I decided to give it a try. Turns out, it's really easy.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nx\">items</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">NSKeyedUnarchiver</span><span class=\"p\">.</span><span class=\"nx\">unarchiveObjectWithFile</span><span class=\"p\">(</span><span class=\"s1\">&#39;/Users/username/Library/Application Support/com.apple.sharedfilelist/com.apple.LSSharedFileList.FavoriteServers.sfl&#39;</span><span class=\"p\">)</span>\n\n<span class=\"nx\">items</span> <span class=\"o\">=</span> <span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">objectForKey</span><span class=\"p\">(</span><span class=\"s1\">&#39;items&#39;</span><span class=\"p\">)</span>\n<span class=\"nx\">itemsCount</span> <span class=\"o\">=</span> <span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">count</span>\n\n<span class=\"nx\">to_ret</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">itemsCount</span><span class=\"o\">--</span><span class=\"p\">){</span>\n      <span class=\"nx\">item</span> <span class=\"o\">=</span> <span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">objectAtIndex</span><span class=\"p\">(</span><span class=\"nx\">itemsCount</span><span class=\"p\">)</span>\n    <span class=\"nx\">to_ret</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span>\n        <span class=\"p\">{</span>\n            <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">,</span> \n            <span class=\"nx\">url</span><span class=\"o\">:</span> <span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">URL</span><span class=\"p\">.</span><span class=\"nx\">absoluteString</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">to_ret</span>\n</code></pre></div>\n\n<p>This returns a nice object of the name and url for the servers in your favorites.</p>\n<p>You can download the workflow here.</p>\n<p><a href=\"https://ryanmo.co/downloads/VNC_Favorites.alfredworkflow\"><img alt=\"image\" src=\"https://ryanmo.co/images/alfred_extension.jpg\" /></a>    </p>",
            "date_published": "2015-10-31T02:11:00-07:00",
            "author": {
                "name": "Ryan M",
                "url": "https://ryanmo.co/author/ryan-m.html"
            },
            "tags": [
                "automation",
                "javascript",
                "objectivec"
            ]
        },
        {
            "id": "https://ryanmo.co/2015/10/24/using-contactsapp-with-textexpander-v2-objective-c-and-javascript",
            "url": "https://ryanmo.co/2015/10/24/using-contactsapp-with-textexpander-v2-objective-c-and-javascript",
            "title": "Using Contacts.app with TextExpander v2: Objective-C and JavaScript",
            "content_html": "\n<p>I was generally happy with how I was using <a href=\"{static}../2015-08-23/2015-08-23_Using-Contacts.app-with-TextExpander.md\">Contacts.app with TextExpander</a> to create snippets for my emails, phone numbers and addresses. However, as I eventually realized, I have to have Contacts.app running for it to work. When AppleScript and JavaScript talk to applications in OS X, they have to be running. That isn't the case for C and Objective-C libraries, so I decided to see how hard it was to use the Objective-C bindings for Javascript.</p>\n\n\n<p>The documentation is just as sparse in <a href=\"https://developer.apple.com/library/mac/releasenotes/InterapplicationCommunication/RN-JavaScriptForAutomation/Articles/OSX10-10.html#//apple_ref/doc/uid/TP40014508-CH109-SW1\">the developer documentation</a>, however <a href=\"http://tylergaw.com/articles/building-osx-apps-with-js\">this article</a> by Tyler Gaw helped get me started in understanding how to represent Objective-C methods in Javascript. It's probably easiest to just show the script and explain what's going on.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nx\">ObjC</span><span class=\"p\">.</span><span class=\"k\">import</span><span class=\"p\">(</span><span class=\"s2\">&quot;AddressBook&quot;</span><span class=\"p\">);</span>\n<span class=\"nx\">sAB</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">ABAddressBook</span><span class=\"p\">.</span><span class=\"nx\">sharedAddressBook</span>\n<span class=\"nx\">meRecord</span> <span class=\"o\">=</span> <span class=\"nx\">sAB</span><span class=\"p\">.</span><span class=\"nx\">me</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">propertyToObjCType</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;email&#39;</span><span class=\"o\">:</span> <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">kABEmailProperty</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;address&#39;</span><span class=\"o\">:</span> <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">kABAddressProperty</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;phone&#39;</span><span class=\"o\">:</span> <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">kABPhoneProperty</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">labelToObjCType</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;work&#39;</span><span class=\"o\">:</span> <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">kABWorkLabel</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;home&#39;</span><span class=\"o\">:</span> <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">kABHomeLabel</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;iPhone&#39;</span><span class=\"o\">:</span> <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">kABPhoneiPhoneLabel</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">valueForProperty</span><span class=\"p\">(</span><span class=\"nx\">property</span><span class=\"p\">){</span>\n    <span class=\"k\">return</span> <span class=\"nx\">meRecord</span><span class=\"p\">.</span><span class=\"nx\">valueForProperty</span><span class=\"p\">(</span><span class=\"nx\">propertyToObjCType</span><span class=\"p\">[</span><span class=\"nx\">property</span><span class=\"p\">])</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">getEmailByLabel</span><span class=\"p\">(</span><span class=\"nx\">inputLabel</span><span class=\"p\">){</span>\n    <span class=\"nx\">emails</span> <span class=\"o\">=</span> <span class=\"nx\">valueForProperty</span><span class=\"p\">(</span><span class=\"s1\">&#39;email&#39;</span><span class=\"p\">)</span>\n    <span class=\"nx\">label</span> <span class=\"o\">=</span> <span class=\"nx\">labelToObjCType</span><span class=\"p\">[</span><span class=\"nx\">inputLabel</span><span class=\"p\">]</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mf\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">emails</span><span class=\"p\">.</span><span class=\"nx\">count</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">CFEqual</span><span class=\"p\">(</span><span class=\"nx\">emails</span><span class=\"p\">.</span><span class=\"nx\">labelAtIndex</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">),</span> <span class=\"nx\">label</span><span class=\"p\">)){</span>\n            <span class=\"k\">return</span> <span class=\"nx\">emails</span><span class=\"p\">.</span><span class=\"nx\">valueAtIndex</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">getAddressByLabel</span><span class=\"p\">(</span><span class=\"nx\">inputLabel</span><span class=\"p\">){</span>\n    <span class=\"nx\">addresses</span> <span class=\"o\">=</span> <span class=\"nx\">valueForProperty</span><span class=\"p\">(</span><span class=\"s1\">&#39;address&#39;</span><span class=\"p\">)</span>\n    <span class=\"nx\">label</span> <span class=\"o\">=</span> <span class=\"nx\">labelToObjCType</span><span class=\"p\">[</span><span class=\"nx\">inputLabel</span><span class=\"p\">]</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mf\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">addresses</span><span class=\"p\">.</span><span class=\"nx\">count</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">CFEqual</span><span class=\"p\">(</span><span class=\"nx\">addresses</span><span class=\"p\">.</span><span class=\"nx\">labelAtIndex</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">),</span> <span class=\"nx\">label</span><span class=\"p\">)){</span>\n            <span class=\"k\">return</span> <span class=\"nx\">sAB</span><span class=\"p\">.</span><span class=\"nx\">formattedAddressFromDictionary</span><span class=\"p\">(</span><span class=\"nx\">addresses</span><span class=\"p\">.</span><span class=\"nx\">valueAtIndex</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">)).</span><span class=\"nx\">string</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">getPhoneByLabel</span><span class=\"p\">(</span><span class=\"nx\">inputLabel</span><span class=\"p\">){</span>\n    <span class=\"nx\">phone</span> <span class=\"o\">=</span> <span class=\"nx\">valueForProperty</span><span class=\"p\">(</span><span class=\"s1\">&#39;phone&#39;</span><span class=\"p\">)</span>\n    <span class=\"nx\">label</span> <span class=\"o\">=</span> <span class=\"nx\">labelToObjCType</span><span class=\"p\">[</span><span class=\"nx\">inputLabel</span><span class=\"p\">]</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mf\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">phone</span><span class=\"p\">.</span><span class=\"nx\">count</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">CFEqual</span><span class=\"p\">(</span><span class=\"nx\">phone</span><span class=\"p\">.</span><span class=\"nx\">labelAtIndex</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">),</span> <span class=\"nx\">label</span><span class=\"p\">)){</span>\n            <span class=\"k\">return</span> <span class=\"nx\">phone</span><span class=\"p\">.</span><span class=\"nx\">valueAtIndex</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n</code></pre></div>\n\n<p>The biggest thing to point out is that if you have a method called in Objective-C like <code>[ABAddressBook sharedAddressBook];</code>, this gets converted to dot notation <code>$.ABAddressBook.sharedAddressBook</code>. The Obj-C bridge is always called with either <code>ObjC.</code> or <code>$.</code> followed by the method.</p>\n<p>You can find a nice list of different properties and values for the address book <a href=\"http://www.macdevcenter.com/pub/a/mac/2002/08/27/cocoa.html?page=2\">here</a>. For labels, the most common will be <code>$.kABHomeLabel</code> and <code>$.kABWorkLabel</code> for home and work respectively. If you've created a custom label (let's call it XXX), you can reference it by calling <code>$.kABXXXLabel</code>.</p>\n<p>As with any other JavaScript snippet in TextExpander, you can call any of these functions to expand the contact information that you'd like.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nx\">getEmailByLabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;home&#39;</span><span class=\"p\">)</span>  <span class=\"c1\">// returns your home phone number</span>\n\n<span class=\"nx\">getAddressByLabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;work&#39;</span><span class=\"p\">)</span>  <span class=\"c1\">// returns your work address</span>\n\n<span class=\"nx\">getAddressByLabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;iPhone&#39;</span><span class=\"p\">)</span>  <span class=\"c1\">// returns your phone number labeled iPhone</span>\n</code></pre></div>\n\n<p>For those of you who don't like copy/pasting the same code over and over, there's a nice little hack that you can do in TextExpander.</p>\n<p>First, create a new Plain Text snippet with the code from the top of the post. I called the snippet \"getInfoFromContacts\". Once that's done, you can create new snippets that take advantage of this code by creating new JavaScript snippets with the following:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">%</span><span class=\"nx\">snippet</span><span class=\"o\">:</span><span class=\"nx\">getInfoFromContacts</span><span class=\"o\">%</span>\n<span class=\"nx\">getEmailByLabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;home&#39;</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>This way, if you update something from the main part of the code, you don't have to update all of your TextExpanders.</p>",
            "summary": "\n<p>I was generally happy with how I was using <a href=\"{static}../2015-08-23/2015-08-23_Using-Contacts.app-with-TextExpander.md\">Contacts.app with TextExpander</a> to create snippets for my emails, phone numbers and addresses. However, as I eventually realized, I have to have Contacts.app running for it to work. When AppleScript and JavaScript talk to applications in OS X, they have to be running. That isn't the case for C and Objective-C libraries, so I decided to see how hard it was to use the Objective-C bindings for Javascript.</p>\n",
            "date_published": "2015-10-24T02:12:00-07:00",
            "author": {
                "name": "Ryan M",
                "url": "https://ryanmo.co/author/ryan-m.html"
            },
            "tags": [
                "textexpander",
                "automation",
                "javascript",
                "objectivec"
            ]
        }
    ],
    "title": "ryanmo.co",
    "version": "https://jsonfeed.org/version/1"
}